// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: user/role.proto

package user

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	opts "github.com/nnqq/scr-proto/codegen/go/opts"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetOwnCompaniesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Opts   *opts.SkipLimit `protobuf:"bytes,2,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (x *GetOwnCompaniesRequest) Reset() {
	*x = GetOwnCompaniesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOwnCompaniesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnCompaniesRequest) ProtoMessage() {}

func (x *GetOwnCompaniesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnCompaniesRequest.ProtoReflect.Descriptor instead.
func (*GetOwnCompaniesRequest) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{0}
}

func (x *GetOwnCompaniesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetOwnCompaniesRequest) GetOpts() *opts.SkipLimit {
	if x != nil {
		return x.Opts
	}
	return nil
}

type GetOwnCompaniesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyIds []string `protobuf:"bytes,1,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *GetOwnCompaniesResponse) Reset() {
	*x = GetOwnCompaniesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOwnCompaniesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOwnCompaniesResponse) ProtoMessage() {}

func (x *GetOwnCompaniesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOwnCompaniesResponse.ProtoReflect.Descriptor instead.
func (*GetOwnCompaniesResponse) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{1}
}

func (x *GetOwnCompaniesResponse) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type GetAdminsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string          `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Opts      *opts.SkipLimit `protobuf:"bytes,2,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (x *GetAdminsRequest) Reset() {
	*x = GetAdminsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminsRequest) ProtoMessage() {}

func (x *GetAdminsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminsRequest.ProtoReflect.Descriptor instead.
func (*GetAdminsRequest) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{2}
}

func (x *GetAdminsRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *GetAdminsRequest) GetOpts() *opts.SkipLimit {
	if x != nil {
		return x.Opts
	}
	return nil
}

type ShortUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Photo     string `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (x *ShortUser) Reset() {
	*x = ShortUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortUser) ProtoMessage() {}

func (x *ShortUser) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortUser.ProtoReflect.Descriptor instead.
func (*ShortUser) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{3}
}

func (x *ShortUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortUser) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ShortUser) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ShortUser) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

type GetAdminsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Admins []*ShortUser `protobuf:"bytes,1,rep,name=admins,proto3" json:"admins,omitempty"`
}

func (x *GetAdminsResponse) Reset() {
	*x = GetAdminsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminsResponse) ProtoMessage() {}

func (x *GetAdminsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminsResponse.ProtoReflect.Descriptor instead.
func (*GetAdminsResponse) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{4}
}

func (x *GetAdminsResponse) GetAdmins() []*ShortUser {
	if x != nil {
		return x.Admins
	}
	return nil
}

type CanEditCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CanEditCompanyRequest) Reset() {
	*x = CanEditCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanEditCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanEditCompanyRequest) ProtoMessage() {}

func (x *CanEditCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanEditCompanyRequest.ProtoReflect.Descriptor instead.
func (*CanEditCompanyRequest) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{5}
}

func (x *CanEditCompanyRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *CanEditCompanyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CanEditCompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanEdit bool `protobuf:"varint,1,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
}

func (x *CanEditCompanyResponse) Reset() {
	*x = CanEditCompanyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanEditCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanEditCompanyResponse) ProtoMessage() {}

func (x *CanEditCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanEditCompanyResponse.ProtoReflect.Descriptor instead.
func (*CanEditCompanyResponse) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{6}
}

func (x *CanEditCompanyResponse) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

type AddCompanyAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AddCompanyAdminRequest) Reset() {
	*x = AddCompanyAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCompanyAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCompanyAdminRequest) ProtoMessage() {}

func (x *AddCompanyAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCompanyAdminRequest.ProtoReflect.Descriptor instead.
func (*AddCompanyAdminRequest) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{7}
}

func (x *AddCompanyAdminRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *AddCompanyAdminRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RemoveCompanyAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RemoveCompanyAdminRequest) Reset() {
	*x = RemoveCompanyAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCompanyAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCompanyAdminRequest) ProtoMessage() {}

func (x *RemoveCompanyAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCompanyAdminRequest.ProtoReflect.Descriptor instead.
func (*RemoveCompanyAdminRequest) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveCompanyAdminRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *RemoveCompanyAdminRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SetCompanyOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SetCompanyOwnerRequest) Reset() {
	*x = SetCompanyOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCompanyOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCompanyOwnerRequest) ProtoMessage() {}

func (x *SetCompanyOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCompanyOwnerRequest.ProtoReflect.Descriptor instead.
func (*SetCompanyOwnerRequest) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{9}
}

func (x *SetCompanyOwnerRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *SetCompanyOwnerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// example.com
type ApplyCompanyOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUrl string `protobuf:"bytes,1,opt,name=company_url,json=companyUrl,proto3" json:"company_url,omitempty"`
}

func (x *ApplyCompanyOwnerRequest) Reset() {
	*x = ApplyCompanyOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCompanyOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCompanyOwnerRequest) ProtoMessage() {}

func (x *ApplyCompanyOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCompanyOwnerRequest.ProtoReflect.Descriptor instead.
func (*ApplyCompanyOwnerRequest) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{10}
}

func (x *ApplyCompanyOwnerRequest) GetCompanyUrl() string {
	if x != nil {
		return x.CompanyUrl
	}
	return ""
}

// example.com
type VerifyCompanyOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUrl string `protobuf:"bytes,1,opt,name=company_url,json=companyUrl,proto3" json:"company_url,omitempty"`
}

func (x *VerifyCompanyOwnerRequest) Reset() {
	*x = VerifyCompanyOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCompanyOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCompanyOwnerRequest) ProtoMessage() {}

func (x *VerifyCompanyOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCompanyOwnerRequest.ProtoReflect.Descriptor instead.
func (*VerifyCompanyOwnerRequest) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{11}
}

func (x *VerifyCompanyOwnerRequest) GetCompanyUrl() string {
	if x != nil {
		return x.CompanyUrl
	}
	return ""
}

type ApplyCompanyOwnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaName    string `protobuf:"bytes,1,opt,name=meta_name,json=metaName,proto3" json:"meta_name,omitempty"`
	MetaContent string `protobuf:"bytes,2,opt,name=meta_content,json=metaContent,proto3" json:"meta_content,omitempty"`
}

func (x *ApplyCompanyOwnerResponse) Reset() {
	*x = ApplyCompanyOwnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCompanyOwnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCompanyOwnerResponse) ProtoMessage() {}

func (x *ApplyCompanyOwnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCompanyOwnerResponse.ProtoReflect.Descriptor instead.
func (*ApplyCompanyOwnerResponse) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{12}
}

func (x *ApplyCompanyOwnerResponse) GetMetaName() string {
	if x != nil {
		return x.MetaName
	}
	return ""
}

func (x *ApplyCompanyOwnerResponse) GetMetaContent() string {
	if x != nil {
		return x.MetaContent
	}
	return ""
}

type SetCompanyAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SetCompanyAdminRequest) Reset() {
	*x = SetCompanyAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_role_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCompanyAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCompanyAdminRequest) ProtoMessage() {}

func (x *SetCompanyAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_role_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCompanyAdminRequest.ProtoReflect.Descriptor instead.
func (*SetCompanyAdminRequest) Descriptor() ([]byte, []int) {
	return file_user_role_proto_rawDescGZIP(), []int{13}
}

func (x *SetCompanyAdminRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *SetCompanyAdminRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

var File_user_role_proto protoreflect.FileDescriptor

var file_user_role_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x70,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22, 0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6f, 0x70,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e,
	0x53, 0x6b, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x22,
	0x6d, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x3c,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x15,
	0x43, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a,
	0x16, 0x43, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64,
	0x69, 0x74, 0x22, 0x50, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x16, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x18, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x72, 0x6c, 0x22, 0x3c, 0x0a, 0x19, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x55, 0x72, 0x6c, 0x22, 0x5b, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x32, 0xc5, 0x06, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x7b,
	0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x12, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x3a,
	0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x64,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x72, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c,
	0x65, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x6c, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x3a,
	0x01, 0x2a, 0x12, 0x58, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12,
	0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f,
	0x6c, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0e,
	0x43, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1b,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x4f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x1c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2b, 0x5a,
	0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6e, 0x71, 0x71,
	0x2f, 0x73, 0x63, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_user_role_proto_rawDescOnce sync.Once
	file_user_role_proto_rawDescData = file_user_role_proto_rawDesc
)

func file_user_role_proto_rawDescGZIP() []byte {
	file_user_role_proto_rawDescOnce.Do(func() {
		file_user_role_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_role_proto_rawDescData)
	})
	return file_user_role_proto_rawDescData
}

var file_user_role_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_user_role_proto_goTypes = []interface{}{
	(*GetOwnCompaniesRequest)(nil),    // 0: user.GetOwnCompaniesRequest
	(*GetOwnCompaniesResponse)(nil),   // 1: user.GetOwnCompaniesResponse
	(*GetAdminsRequest)(nil),          // 2: user.GetAdminsRequest
	(*ShortUser)(nil),                 // 3: user.ShortUser
	(*GetAdminsResponse)(nil),         // 4: user.GetAdminsResponse
	(*CanEditCompanyRequest)(nil),     // 5: user.CanEditCompanyRequest
	(*CanEditCompanyResponse)(nil),    // 6: user.CanEditCompanyResponse
	(*AddCompanyAdminRequest)(nil),    // 7: user.AddCompanyAdminRequest
	(*RemoveCompanyAdminRequest)(nil), // 8: user.RemoveCompanyAdminRequest
	(*SetCompanyOwnerRequest)(nil),    // 9: user.SetCompanyOwnerRequest
	(*ApplyCompanyOwnerRequest)(nil),  // 10: user.ApplyCompanyOwnerRequest
	(*VerifyCompanyOwnerRequest)(nil), // 11: user.VerifyCompanyOwnerRequest
	(*ApplyCompanyOwnerResponse)(nil), // 12: user.ApplyCompanyOwnerResponse
	(*SetCompanyAdminRequest)(nil),    // 13: user.SetCompanyAdminRequest
	(*opts.SkipLimit)(nil),            // 14: opts.SkipLimit
	(*empty.Empty)(nil),               // 15: google.protobuf.Empty
}
var file_user_role_proto_depIdxs = []int32{
	14, // 0: user.GetOwnCompaniesRequest.opts:type_name -> opts.SkipLimit
	14, // 1: user.GetAdminsRequest.opts:type_name -> opts.SkipLimit
	3,  // 2: user.GetAdminsResponse.admins:type_name -> user.ShortUser
	10, // 3: user.Role.ApplyCompanyOwner:input_type -> user.ApplyCompanyOwnerRequest
	11, // 4: user.Role.VerifyCompanyOwner:input_type -> user.VerifyCompanyOwnerRequest
	7,  // 5: user.Role.AddCompanyAdmin:input_type -> user.AddCompanyAdminRequest
	8,  // 6: user.Role.RemoveCompanyAdmin:input_type -> user.RemoveCompanyAdminRequest
	9,  // 7: user.Role.SetCompanyOwner:input_type -> user.SetCompanyOwnerRequest
	2,  // 8: user.Role.GetAdmins:input_type -> user.GetAdminsRequest
	5,  // 9: user.Role.CanEditCompany:input_type -> user.CanEditCompanyRequest
	0,  // 10: user.Role.GetOwnCompanies:input_type -> user.GetOwnCompaniesRequest
	12, // 11: user.Role.ApplyCompanyOwner:output_type -> user.ApplyCompanyOwnerResponse
	15, // 12: user.Role.VerifyCompanyOwner:output_type -> google.protobuf.Empty
	15, // 13: user.Role.AddCompanyAdmin:output_type -> google.protobuf.Empty
	15, // 14: user.Role.RemoveCompanyAdmin:output_type -> google.protobuf.Empty
	15, // 15: user.Role.SetCompanyOwner:output_type -> google.protobuf.Empty
	4,  // 16: user.Role.GetAdmins:output_type -> user.GetAdminsResponse
	6,  // 17: user.Role.CanEditCompany:output_type -> user.CanEditCompanyResponse
	1,  // 18: user.Role.GetOwnCompanies:output_type -> user.GetOwnCompaniesResponse
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_user_role_proto_init() }
func file_user_role_proto_init() {
	if File_user_role_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_role_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOwnCompaniesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOwnCompaniesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanEditCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanEditCompanyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCompanyAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCompanyAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCompanyOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCompanyOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCompanyOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCompanyOwnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_role_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCompanyAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_role_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_role_proto_goTypes,
		DependencyIndexes: file_user_role_proto_depIdxs,
		MessageInfos:      file_user_role_proto_msgTypes,
	}.Build()
	File_user_role_proto = out.File
	file_user_role_proto_rawDesc = nil
	file_user_role_proto_goTypes = nil
	file_user_role_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoleClient is the client API for Role service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoleClient interface {
	// create request to apply current user as company owner. company can have only one owner
	ApplyCompanyOwner(ctx context.Context, in *ApplyCompanyOwnerRequest, opts ...grpc.CallOption) (*ApplyCompanyOwnerResponse, error)
	VerifyCompanyOwner(ctx context.Context, in *VerifyCompanyOwnerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// only owner can set admins (up to 100)
	AddCompanyAdmin(ctx context.Context, in *AddCompanyAdminRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveCompanyAdmin(ctx context.Context, in *RemoveCompanyAdminRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// company owner can move self owner-role to another user. this action is irreversible
	SetCompanyOwner(ctx context.Context, in *SetCompanyOwnerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAdmins(ctx context.Context, in *GetAdminsRequest, opts ...grpc.CallOption) (*GetAdminsResponse, error)
	CanEditCompany(ctx context.Context, in *CanEditCompanyRequest, opts ...grpc.CallOption) (*CanEditCompanyResponse, error)
	// where current user is owner or admin
	GetOwnCompanies(ctx context.Context, in *GetOwnCompaniesRequest, opts ...grpc.CallOption) (*GetOwnCompaniesResponse, error)
}

type roleClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleClient(cc grpc.ClientConnInterface) RoleClient {
	return &roleClient{cc}
}

func (c *roleClient) ApplyCompanyOwner(ctx context.Context, in *ApplyCompanyOwnerRequest, opts ...grpc.CallOption) (*ApplyCompanyOwnerResponse, error) {
	out := new(ApplyCompanyOwnerResponse)
	err := c.cc.Invoke(ctx, "/user.Role/ApplyCompanyOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) VerifyCompanyOwner(ctx context.Context, in *VerifyCompanyOwnerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user.Role/VerifyCompanyOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) AddCompanyAdmin(ctx context.Context, in *AddCompanyAdminRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user.Role/AddCompanyAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) RemoveCompanyAdmin(ctx context.Context, in *RemoveCompanyAdminRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user.Role/RemoveCompanyAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) SetCompanyOwner(ctx context.Context, in *SetCompanyOwnerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user.Role/SetCompanyOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) GetAdmins(ctx context.Context, in *GetAdminsRequest, opts ...grpc.CallOption) (*GetAdminsResponse, error) {
	out := new(GetAdminsResponse)
	err := c.cc.Invoke(ctx, "/user.Role/GetAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) CanEditCompany(ctx context.Context, in *CanEditCompanyRequest, opts ...grpc.CallOption) (*CanEditCompanyResponse, error) {
	out := new(CanEditCompanyResponse)
	err := c.cc.Invoke(ctx, "/user.Role/CanEditCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) GetOwnCompanies(ctx context.Context, in *GetOwnCompaniesRequest, opts ...grpc.CallOption) (*GetOwnCompaniesResponse, error) {
	out := new(GetOwnCompaniesResponse)
	err := c.cc.Invoke(ctx, "/user.Role/GetOwnCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServer is the server API for Role service.
type RoleServer interface {
	// create request to apply current user as company owner. company can have only one owner
	ApplyCompanyOwner(context.Context, *ApplyCompanyOwnerRequest) (*ApplyCompanyOwnerResponse, error)
	VerifyCompanyOwner(context.Context, *VerifyCompanyOwnerRequest) (*empty.Empty, error)
	// only owner can set admins (up to 100)
	AddCompanyAdmin(context.Context, *AddCompanyAdminRequest) (*empty.Empty, error)
	RemoveCompanyAdmin(context.Context, *RemoveCompanyAdminRequest) (*empty.Empty, error)
	// company owner can move self owner-role to another user. this action is irreversible
	SetCompanyOwner(context.Context, *SetCompanyOwnerRequest) (*empty.Empty, error)
	GetAdmins(context.Context, *GetAdminsRequest) (*GetAdminsResponse, error)
	CanEditCompany(context.Context, *CanEditCompanyRequest) (*CanEditCompanyResponse, error)
	// where current user is owner or admin
	GetOwnCompanies(context.Context, *GetOwnCompaniesRequest) (*GetOwnCompaniesResponse, error)
}

// UnimplementedRoleServer can be embedded to have forward compatible implementations.
type UnimplementedRoleServer struct {
}

func (*UnimplementedRoleServer) ApplyCompanyOwner(context.Context, *ApplyCompanyOwnerRequest) (*ApplyCompanyOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCompanyOwner not implemented")
}
func (*UnimplementedRoleServer) VerifyCompanyOwner(context.Context, *VerifyCompanyOwnerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCompanyOwner not implemented")
}
func (*UnimplementedRoleServer) AddCompanyAdmin(context.Context, *AddCompanyAdminRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompanyAdmin not implemented")
}
func (*UnimplementedRoleServer) RemoveCompanyAdmin(context.Context, *RemoveCompanyAdminRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCompanyAdmin not implemented")
}
func (*UnimplementedRoleServer) SetCompanyOwner(context.Context, *SetCompanyOwnerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCompanyOwner not implemented")
}
func (*UnimplementedRoleServer) GetAdmins(context.Context, *GetAdminsRequest) (*GetAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmins not implemented")
}
func (*UnimplementedRoleServer) CanEditCompany(context.Context, *CanEditCompanyRequest) (*CanEditCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanEditCompany not implemented")
}
func (*UnimplementedRoleServer) GetOwnCompanies(context.Context, *GetOwnCompaniesRequest) (*GetOwnCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnCompanies not implemented")
}

func RegisterRoleServer(s *grpc.Server, srv RoleServer) {
	s.RegisterService(&_Role_serviceDesc, srv)
}

func _Role_ApplyCompanyOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyCompanyOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).ApplyCompanyOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/ApplyCompanyOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).ApplyCompanyOwner(ctx, req.(*ApplyCompanyOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_VerifyCompanyOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCompanyOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).VerifyCompanyOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/VerifyCompanyOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).VerifyCompanyOwner(ctx, req.(*VerifyCompanyOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_AddCompanyAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompanyAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).AddCompanyAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/AddCompanyAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).AddCompanyAdmin(ctx, req.(*AddCompanyAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_RemoveCompanyAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCompanyAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).RemoveCompanyAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/RemoveCompanyAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).RemoveCompanyAdmin(ctx, req.(*RemoveCompanyAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_SetCompanyOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCompanyOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).SetCompanyOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/SetCompanyOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).SetCompanyOwner(ctx, req.(*SetCompanyOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_GetAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).GetAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/GetAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).GetAdmins(ctx, req.(*GetAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_CanEditCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanEditCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).CanEditCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/CanEditCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).CanEditCompany(ctx, req.(*CanEditCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_GetOwnCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnCompaniesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).GetOwnCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Role/GetOwnCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).GetOwnCompanies(ctx, req.(*GetOwnCompaniesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Role_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.Role",
	HandlerType: (*RoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyCompanyOwner",
			Handler:    _Role_ApplyCompanyOwner_Handler,
		},
		{
			MethodName: "VerifyCompanyOwner",
			Handler:    _Role_VerifyCompanyOwner_Handler,
		},
		{
			MethodName: "AddCompanyAdmin",
			Handler:    _Role_AddCompanyAdmin_Handler,
		},
		{
			MethodName: "RemoveCompanyAdmin",
			Handler:    _Role_RemoveCompanyAdmin_Handler,
		},
		{
			MethodName: "SetCompanyOwner",
			Handler:    _Role_SetCompanyOwner_Handler,
		},
		{
			MethodName: "GetAdmins",
			Handler:    _Role_GetAdmins_Handler,
		},
		{
			MethodName: "CanEditCompany",
			Handler:    _Role_CanEditCompany_Handler,
		},
		{
			MethodName: "GetOwnCompanies",
			Handler:    _Role_GetOwnCompanies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/role.proto",
}
