// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: fns/fns.proto

package fns

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OrgKind int32

const (
	OrgKind_ORG_KIND_NONE OrgKind = 0
	// Юридическое лицо
	OrgKind_LEGAL OrgKind = 1
	// Индивидуальный предприниматель
	OrgKind_INDIVIDUAL OrgKind = 2
)

// Enum value maps for OrgKind.
var (
	OrgKind_name = map[int32]string{
		0: "ORG_KIND_NONE",
		1: "LEGAL",
		2: "INDIVIDUAL",
	}
	OrgKind_value = map[string]int32{
		"ORG_KIND_NONE": 0,
		"LEGAL":         1,
		"INDIVIDUAL":    2,
	}
)

func (x OrgKind) Enum() *OrgKind {
	p := new(OrgKind)
	*p = x
	return p
}

func (x OrgKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrgKind) Descriptor() protoreflect.EnumDescriptor {
	return file_fns_fns_proto_enumTypes[0].Descriptor()
}

func (OrgKind) Type() protoreflect.EnumType {
	return &file_fns_fns_proto_enumTypes[0]
}

func (x OrgKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrgKind.Descriptor instead.
func (OrgKind) EnumDescriptor() ([]byte, []int) {
	return file_fns_fns_proto_rawDescGZIP(), []int{0}
}

// Версия справочника ОКВЭД
type OkvedKind int32

const (
	OkvedKind_OKVED_KIND_NONE OkvedKind = 0
	OkvedKind_y2001           OkvedKind = 1
	OkvedKind_y2004           OkvedKind = 2
)

// Enum value maps for OkvedKind.
var (
	OkvedKind_name = map[int32]string{
		0: "OKVED_KIND_NONE",
		1: "y2001",
		2: "y2004",
	}
	OkvedKind_value = map[string]int32{
		"OKVED_KIND_NONE": 0,
		"y2001":           1,
		"y2004":           2,
	}
)

func (x OkvedKind) Enum() *OkvedKind {
	p := new(OkvedKind)
	*p = x
	return p
}

func (x OkvedKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OkvedKind) Descriptor() protoreflect.EnumDescriptor {
	return file_fns_fns_proto_enumTypes[1].Descriptor()
}

func (OkvedKind) Type() protoreflect.EnumType {
	return &file_fns_fns_proto_enumTypes[1]
}

func (x OkvedKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OkvedKind.Descriptor instead.
func (OkvedKind) EnumDescriptor() ([]byte, []int) {
	return file_fns_fns_proto_rawDescGZIP(), []int{1}
}

// Версия справочника ОКОПФ
type OpfKind int32

const (
	OpfKind_OPF_KIND_NONE OpfKind = 0
	OpfKind_y1999         OpfKind = 1
	OpfKind_y2012         OpfKind = 2
	OpfKind_y2014         OpfKind = 3
)

// Enum value maps for OpfKind.
var (
	OpfKind_name = map[int32]string{
		0: "OPF_KIND_NONE",
		1: "y1999",
		2: "y2012",
		3: "y2014",
	}
	OpfKind_value = map[string]int32{
		"OPF_KIND_NONE": 0,
		"y1999":         1,
		"y2012":         2,
		"y2014":         3,
	}
)

func (x OpfKind) Enum() *OpfKind {
	p := new(OpfKind)
	*p = x
	return p
}

func (x OpfKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpfKind) Descriptor() protoreflect.EnumDescriptor {
	return file_fns_fns_proto_enumTypes[2].Descriptor()
}

func (OpfKind) Type() protoreflect.EnumType {
	return &file_fns_fns_proto_enumTypes[2]
}

func (x OpfKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpfKind.Descriptor instead.
func (OpfKind) EnumDescriptor() ([]byte, []int) {
	return file_fns_fns_proto_rawDescGZIP(), []int{2}
}

// Тип подразделения
type BranchKind int32

const (
	BranchKind_BRANCH_KIND_NONE BranchKind = 0
	// Головная организация
	BranchKind_MAIN BranchKind = 1
	// Филиал
	BranchKind_BRANCH BranchKind = 2
)

// Enum value maps for BranchKind.
var (
	BranchKind_name = map[int32]string{
		0: "BRANCH_KIND_NONE",
		1: "MAIN",
		2: "BRANCH",
	}
	BranchKind_value = map[string]int32{
		"BRANCH_KIND_NONE": 0,
		"MAIN":             1,
		"BRANCH":           2,
	}
)

func (x BranchKind) Enum() *BranchKind {
	p := new(BranchKind)
	*p = x
	return p
}

func (x BranchKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BranchKind) Descriptor() protoreflect.EnumDescriptor {
	return file_fns_fns_proto_enumTypes[3].Descriptor()
}

func (BranchKind) Type() protoreflect.EnumType {
	return &file_fns_fns_proto_enumTypes[3]
}

func (x BranchKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BranchKind.Descriptor instead.
func (BranchKind) EnumDescriptor() ([]byte, []int) {
	return file_fns_fns_proto_rawDescGZIP(), []int{3}
}

// Статус организации
type StatusKind int32

const (
	StatusKind_STATUS_KIND_NONE StatusKind = 0
	// Действующая
	StatusKind_ACTIVE StatusKind = 1
	// Ликвидируется
	StatusKind_LIQUIDATING StatusKind = 2
	// Ликвидирована
	StatusKind_LIQUIDATED StatusKind = 3
	// Банкротство
	StatusKind_BANKRUPT StatusKind = 4
	// В процессе присоединения к другому юрлицу, с последующей ликвидацией
	StatusKind_REORGANIZING StatusKind = 5
)

// Enum value maps for StatusKind.
var (
	StatusKind_name = map[int32]string{
		0: "STATUS_KIND_NONE",
		1: "ACTIVE",
		2: "LIQUIDATING",
		3: "LIQUIDATED",
		4: "BANKRUPT",
		5: "REORGANIZING",
	}
	StatusKind_value = map[string]int32{
		"STATUS_KIND_NONE": 0,
		"ACTIVE":           1,
		"LIQUIDATING":      2,
		"LIQUIDATED":       3,
		"BANKRUPT":         4,
		"REORGANIZING":     5,
	}
)

func (x StatusKind) Enum() *StatusKind {
	p := new(StatusKind)
	*p = x
	return p
}

func (x StatusKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusKind) Descriptor() protoreflect.EnumDescriptor {
	return file_fns_fns_proto_enumTypes[4].Descriptor()
}

func (StatusKind) Type() protoreflect.EnumType {
	return &file_fns_fns_proto_enumTypes[4]
}

func (x StatusKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusKind.Descriptor instead.
func (StatusKind) EnumDescriptor() ([]byte, []int) {
	return file_fns_fns_proto_rawDescGZIP(), []int{4}
}

type ReindexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Inn              float64    `protobuf:"fixed64,2,opt,name=inn,proto3" json:"inn,omitempty"`
	Kpp              float64    `protobuf:"fixed64,3,opt,name=kpp,proto3" json:"kpp,omitempty"`
	Ogrn             float64    `protobuf:"fixed64,4,opt,name=ogrn,proto3" json:"ogrn,omitempty"`
	OgrnDate         string     `protobuf:"bytes,5,opt,name=ogrn_date,json=ogrnDate,proto3" json:"ogrn_date,omitempty"`
	OrgKind          OrgKind    `protobuf:"varint,6,opt,name=org_kind,json=orgKind,proto3,enum=fns.OrgKind" json:"org_kind,omitempty"`
	NameFullWithOpf  string     `protobuf:"bytes,7,opt,name=name_full_with_opf,json=nameFullWithOpf,proto3" json:"name_full_with_opf,omitempty"`
	NameShortWithOpf string     `protobuf:"bytes,8,opt,name=name_short_with_opf,json=nameShortWithOpf,proto3" json:"name_short_with_opf,omitempty"`
	Okato            float64    `protobuf:"fixed64,9,opt,name=okato,proto3" json:"okato,omitempty"`
	Oktmo            float64    `protobuf:"fixed64,10,opt,name=oktmo,proto3" json:"oktmo,omitempty"`
	Okpo             float64    `protobuf:"fixed64,11,opt,name=okpo,proto3" json:"okpo,omitempty"`
	Okogu            float64    `protobuf:"fixed64,12,opt,name=okogu,proto3" json:"okogu,omitempty"`
	Okfs             float64    `protobuf:"fixed64,13,opt,name=okfs,proto3" json:"okfs,omitempty"`
	Okved            string     `protobuf:"bytes,14,opt,name=okved,proto3" json:"okved,omitempty"`
	OkvedKind        OkvedKind  `protobuf:"varint,15,opt,name=okved_kind,json=okvedKind,proto3,enum=fns.OkvedKind" json:"okved_kind,omitempty"`
	OpfCode          float64    `protobuf:"fixed64,16,opt,name=opf_code,json=opfCode,proto3" json:"opf_code,omitempty"`
	OpfFull          string     `protobuf:"bytes,17,opt,name=opf_full,json=opfFull,proto3" json:"opf_full,omitempty"`
	OpfShort         string     `protobuf:"bytes,18,opt,name=opf_short,json=opfShort,proto3" json:"opf_short,omitempty"`
	OpfKind          OpfKind    `protobuf:"varint,19,opt,name=opf_kind,json=opfKind,proto3,enum=fns.OpfKind" json:"opf_kind,omitempty"`
	ManagementName   string     `protobuf:"bytes,20,opt,name=management_name,json=managementName,proto3" json:"management_name,omitempty"`
	ManagementPost   string     `protobuf:"bytes,21,opt,name=management_post,json=managementPost,proto3" json:"management_post,omitempty"`
	BranchCount      uint32     `protobuf:"varint,22,opt,name=branch_count,json=branchCount,proto3" json:"branch_count,omitempty"`
	BranchKind       BranchKind `protobuf:"varint,23,opt,name=branch_kind,json=branchKind,proto3,enum=fns.BranchKind" json:"branch_kind,omitempty"`
	Address          string     `protobuf:"bytes,24,opt,name=address,proto3" json:"address,omitempty"`
	Region           string     `protobuf:"bytes,25,opt,name=region,proto3" json:"region,omitempty"`
	RegistrationDate string     `protobuf:"bytes,26,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date,omitempty"`
	LiquidationDate  string     `protobuf:"bytes,27,opt,name=liquidation_date,json=liquidationDate,proto3" json:"liquidation_date,omitempty"`
	StatusKind       StatusKind `protobuf:"varint,28,opt,name=status_kind,json=statusKind,proto3,enum=fns.StatusKind" json:"status_kind,omitempty"`
}

func (x *ReindexRequest) Reset() {
	*x = ReindexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fns_fns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReindexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReindexRequest) ProtoMessage() {}

func (x *ReindexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fns_fns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReindexRequest.ProtoReflect.Descriptor instead.
func (*ReindexRequest) Descriptor() ([]byte, []int) {
	return file_fns_fns_proto_rawDescGZIP(), []int{0}
}

func (x *ReindexRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReindexRequest) GetInn() float64 {
	if x != nil {
		return x.Inn
	}
	return 0
}

func (x *ReindexRequest) GetKpp() float64 {
	if x != nil {
		return x.Kpp
	}
	return 0
}

func (x *ReindexRequest) GetOgrn() float64 {
	if x != nil {
		return x.Ogrn
	}
	return 0
}

func (x *ReindexRequest) GetOgrnDate() string {
	if x != nil {
		return x.OgrnDate
	}
	return ""
}

func (x *ReindexRequest) GetOrgKind() OrgKind {
	if x != nil {
		return x.OrgKind
	}
	return OrgKind_ORG_KIND_NONE
}

func (x *ReindexRequest) GetNameFullWithOpf() string {
	if x != nil {
		return x.NameFullWithOpf
	}
	return ""
}

func (x *ReindexRequest) GetNameShortWithOpf() string {
	if x != nil {
		return x.NameShortWithOpf
	}
	return ""
}

func (x *ReindexRequest) GetOkato() float64 {
	if x != nil {
		return x.Okato
	}
	return 0
}

func (x *ReindexRequest) GetOktmo() float64 {
	if x != nil {
		return x.Oktmo
	}
	return 0
}

func (x *ReindexRequest) GetOkpo() float64 {
	if x != nil {
		return x.Okpo
	}
	return 0
}

func (x *ReindexRequest) GetOkogu() float64 {
	if x != nil {
		return x.Okogu
	}
	return 0
}

func (x *ReindexRequest) GetOkfs() float64 {
	if x != nil {
		return x.Okfs
	}
	return 0
}

func (x *ReindexRequest) GetOkved() string {
	if x != nil {
		return x.Okved
	}
	return ""
}

func (x *ReindexRequest) GetOkvedKind() OkvedKind {
	if x != nil {
		return x.OkvedKind
	}
	return OkvedKind_OKVED_KIND_NONE
}

func (x *ReindexRequest) GetOpfCode() float64 {
	if x != nil {
		return x.OpfCode
	}
	return 0
}

func (x *ReindexRequest) GetOpfFull() string {
	if x != nil {
		return x.OpfFull
	}
	return ""
}

func (x *ReindexRequest) GetOpfShort() string {
	if x != nil {
		return x.OpfShort
	}
	return ""
}

func (x *ReindexRequest) GetOpfKind() OpfKind {
	if x != nil {
		return x.OpfKind
	}
	return OpfKind_OPF_KIND_NONE
}

func (x *ReindexRequest) GetManagementName() string {
	if x != nil {
		return x.ManagementName
	}
	return ""
}

func (x *ReindexRequest) GetManagementPost() string {
	if x != nil {
		return x.ManagementPost
	}
	return ""
}

func (x *ReindexRequest) GetBranchCount() uint32 {
	if x != nil {
		return x.BranchCount
	}
	return 0
}

func (x *ReindexRequest) GetBranchKind() BranchKind {
	if x != nil {
		return x.BranchKind
	}
	return BranchKind_BRANCH_KIND_NONE
}

func (x *ReindexRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ReindexRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ReindexRequest) GetRegistrationDate() string {
	if x != nil {
		return x.RegistrationDate
	}
	return ""
}

func (x *ReindexRequest) GetLiquidationDate() string {
	if x != nil {
		return x.LiquidationDate
	}
	return ""
}

func (x *ReindexRequest) GetStatusKind() StatusKind {
	if x != nil {
		return x.StatusKind
	}
	return StatusKind_STATUS_KIND_NONE
}

var File_fns_fns_proto protoreflect.FileDescriptor

var file_fns_fns_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x6e, 0x73, 0x2f, 0x66, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x66, 0x6e, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8c, 0x07, 0x0a, 0x0e, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x69, 0x6e, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x70,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6b, 0x70, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6f, 0x67, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x67, 0x72, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x67, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x67, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x66, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x66, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x70, 0x66, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x70, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x6b, 0x61, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x6f, 0x6b, 0x61, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x6b, 0x74, 0x6d,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6f, 0x6b, 0x74, 0x6d, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x6b, 0x70, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x6b,
	0x70, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x6b, 0x6f, 0x67, 0x75, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x6f, 0x6b, 0x6f, 0x67, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x6b, 0x66, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x6b, 0x66, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x6b, 0x76, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x6b, 0x76,
	0x65, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x6f, 0x6b, 0x76, 0x65, 0x64, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x66, 0x6e, 0x73, 0x2e, 0x4f, 0x6b, 0x76,
	0x65, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x09, 0x6f, 0x6b, 0x76, 0x65, 0x64, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x70, 0x66, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x70, 0x66, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x66, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x6f, 0x70, 0x66, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x66, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x66,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x6f, 0x70, 0x66, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x6e, 0x73, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4b, 0x69, 0x6e, 0x64,
	0x2a, 0x37, 0x0a, 0x07, 0x4f, 0x72, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x52, 0x47, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x44,
	0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x36, 0x0a, 0x09, 0x4f, 0x6b, 0x76,
	0x65, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x4b, 0x56, 0x45, 0x44, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x79,
	0x32, 0x30, 0x30, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x79, 0x32, 0x30, 0x30, 0x34, 0x10,
	0x02, 0x2a, 0x3d, 0x0a, 0x07, 0x4f, 0x70, 0x66, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x50, 0x46, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x79, 0x31, 0x39, 0x39, 0x39, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x79, 0x32,
	0x30, 0x31, 0x32, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x79, 0x32, 0x30, 0x31, 0x34, 0x10, 0x03,
	0x2a, 0x38, 0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x02, 0x2a, 0x6f, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49,
	0x51, 0x55, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x49, 0x51, 0x55, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x41, 0x4e, 0x4b, 0x52, 0x55, 0x50, 0x54, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x32, 0x3f, 0x0a, 0x03, 0x46,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x13, 0x2e,
	0x66, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6e, 0x71, 0x71, 0x2f,
	0x73, 0x63, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fns_fns_proto_rawDescOnce sync.Once
	file_fns_fns_proto_rawDescData = file_fns_fns_proto_rawDesc
)

func file_fns_fns_proto_rawDescGZIP() []byte {
	file_fns_fns_proto_rawDescOnce.Do(func() {
		file_fns_fns_proto_rawDescData = protoimpl.X.CompressGZIP(file_fns_fns_proto_rawDescData)
	})
	return file_fns_fns_proto_rawDescData
}

var file_fns_fns_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_fns_fns_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_fns_fns_proto_goTypes = []interface{}{
	(OrgKind)(0),           // 0: fns.OrgKind
	(OkvedKind)(0),         // 1: fns.OkvedKind
	(OpfKind)(0),           // 2: fns.OpfKind
	(BranchKind)(0),        // 3: fns.BranchKind
	(StatusKind)(0),        // 4: fns.StatusKind
	(*ReindexRequest)(nil), // 5: fns.ReindexRequest
	(*empty.Empty)(nil),    // 6: google.protobuf.Empty
}
var file_fns_fns_proto_depIdxs = []int32{
	0, // 0: fns.ReindexRequest.org_kind:type_name -> fns.OrgKind
	1, // 1: fns.ReindexRequest.okved_kind:type_name -> fns.OkvedKind
	2, // 2: fns.ReindexRequest.opf_kind:type_name -> fns.OpfKind
	3, // 3: fns.ReindexRequest.branch_kind:type_name -> fns.BranchKind
	4, // 4: fns.ReindexRequest.status_kind:type_name -> fns.StatusKind
	5, // 5: fns.Fns.Reindex:input_type -> fns.ReindexRequest
	6, // 6: fns.Fns.Reindex:output_type -> google.protobuf.Empty
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_fns_fns_proto_init() }
func file_fns_fns_proto_init() {
	if File_fns_fns_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fns_fns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReindexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fns_fns_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fns_fns_proto_goTypes,
		DependencyIndexes: file_fns_fns_proto_depIdxs,
		EnumInfos:         file_fns_fns_proto_enumTypes,
		MessageInfos:      file_fns_fns_proto_msgTypes,
	}.Build()
	File_fns_fns_proto = out.File
	file_fns_fns_proto_rawDesc = nil
	file_fns_fns_proto_goTypes = nil
	file_fns_fns_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FnsClient is the client API for Fns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FnsClient interface {
	Reindex(ctx context.Context, in *ReindexRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type fnsClient struct {
	cc grpc.ClientConnInterface
}

func NewFnsClient(cc grpc.ClientConnInterface) FnsClient {
	return &fnsClient{cc}
}

func (c *fnsClient) Reindex(ctx context.Context, in *ReindexRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fns.Fns/Reindex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FnsServer is the server API for Fns service.
type FnsServer interface {
	Reindex(context.Context, *ReindexRequest) (*empty.Empty, error)
}

// UnimplementedFnsServer can be embedded to have forward compatible implementations.
type UnimplementedFnsServer struct {
}

func (*UnimplementedFnsServer) Reindex(context.Context, *ReindexRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reindex not implemented")
}

func RegisterFnsServer(s *grpc.Server, srv FnsServer) {
	s.RegisterService(&_Fns_serviceDesc, srv)
}

func _Fns_Reindex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReindexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FnsServer).Reindex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fns.Fns/Reindex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FnsServer).Reindex(ctx, req.(*ReindexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fns_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fns.Fns",
	HandlerType: (*FnsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reindex",
			Handler:    _Fns_Reindex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fns/fns.proto",
}
