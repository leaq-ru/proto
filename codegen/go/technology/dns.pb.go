// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: technology/dns.proto

package technology

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetDnsHintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExcludeIds []string `protobuf:"bytes,2,rep,name=exclude_ids,json=excludeIds,proto3" json:"exclude_ids,omitempty"`
	Limit      uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetDnsHintsRequest) Reset() {
	*x = GetDnsHintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_dns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDnsHintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsHintsRequest) ProtoMessage() {}

func (x *GetDnsHintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_technology_dns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsHintsRequest.ProtoReflect.Descriptor instead.
func (*GetDnsHintsRequest) Descriptor() ([]byte, []int) {
	return file_technology_dns_proto_rawDescGZIP(), []int{0}
}

func (x *GetDnsHintsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDnsHintsRequest) GetExcludeIds() []string {
	if x != nil {
		return x.ExcludeIds
	}
	return nil
}

func (x *GetDnsHintsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DnsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DnsItem) Reset() {
	*x = DnsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_dns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsItem) ProtoMessage() {}

func (x *DnsItem) ProtoReflect() protoreflect.Message {
	mi := &file_technology_dns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsItem.ProtoReflect.Descriptor instead.
func (*DnsItem) Descriptor() ([]byte, []int) {
	return file_technology_dns_proto_rawDescGZIP(), []int{1}
}

func (x *DnsItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DnsItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetDnsHintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dns []*DnsItem `protobuf:"bytes,1,rep,name=dns,proto3" json:"dns,omitempty"`
}

func (x *GetDnsHintsResponse) Reset() {
	*x = GetDnsHintsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_dns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDnsHintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsHintsResponse) ProtoMessage() {}

func (x *GetDnsHintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_technology_dns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsHintsResponse.ProtoReflect.Descriptor instead.
func (*GetDnsHintsResponse) Descriptor() ([]byte, []int) {
	return file_technology_dns_proto_rawDescGZIP(), []int{2}
}

func (x *GetDnsHintsResponse) GetDns() []*DnsItem {
	if x != nil {
		return x.Dns
	}
	return nil
}

type GetDnsByIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetDnsByIdsRequest) Reset() {
	*x = GetDnsByIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_dns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDnsByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsByIdsRequest) ProtoMessage() {}

func (x *GetDnsByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_technology_dns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsByIdsRequest.ProtoReflect.Descriptor instead.
func (*GetDnsByIdsRequest) Descriptor() ([]byte, []int) {
	return file_technology_dns_proto_rawDescGZIP(), []int{3}
}

func (x *GetDnsByIdsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetDnsByIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dns []*DnsItem `protobuf:"bytes,1,rep,name=dns,proto3" json:"dns,omitempty"`
}

func (x *GetDnsByIdsResponse) Reset() {
	*x = GetDnsByIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_dns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDnsByIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsByIdsResponse) ProtoMessage() {}

func (x *GetDnsByIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_technology_dns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsByIdsResponse.ProtoReflect.Descriptor instead.
func (*GetDnsByIdsResponse) Descriptor() ([]byte, []int) {
	return file_technology_dns_proto_rawDescGZIP(), []int{4}
}

func (x *GetDnsByIdsResponse) GetDns() []*DnsItem {
	if x != nil {
		return x.Dns
	}
	return nil
}

type FindDnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *FindDnsRequest) Reset() {
	*x = FindDnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_dns_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDnsRequest) ProtoMessage() {}

func (x *FindDnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_technology_dns_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDnsRequest.ProtoReflect.Descriptor instead.
func (*FindDnsRequest) Descriptor() ([]byte, []int) {
	return file_technology_dns_proto_rawDescGZIP(), []int{5}
}

func (x *FindDnsRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type FindDnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *FindDnsResponse) Reset() {
	*x = FindDnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_technology_dns_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDnsResponse) ProtoMessage() {}

func (x *FindDnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_technology_dns_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDnsResponse.ProtoReflect.Descriptor instead.
func (*FindDnsResponse) Descriptor() ([]byte, []int) {
	return file_technology_dns_proto_rawDescGZIP(), []int{6}
}

func (x *FindDnsResponse) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_technology_dns_proto protoreflect.FileDescriptor

var file_technology_dns_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x64, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x6e, 0x73, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x0a,
	0x32, 0x30, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x59, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x2d, 0x0a, 0x07, 0x44, 0x6e, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x6e, 0x73, 0x48, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x64, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x44, 0x6e, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x64, 0x6e, 0x73,
	0x22, 0x26, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x3c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44,
	0x6e, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x44, 0x6e, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x22, 0x22, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x23, 0x0a, 0x0f, 0x46, 0x69,
	0x6e, 0x64, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x32,
	0x87, 0x02, 0x0a, 0x03, 0x44, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x44,
	0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x44, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6e, 0x73,
	0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6e, 0x73,
	0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x6e, 0x73, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x6e, 0x73, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x6e, 0x73, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6e, 0x73,
	0x2f, 0x67, 0x65, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6e, 0x71, 0x71, 0x2f, 0x73, 0x63, 0x72,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_technology_dns_proto_rawDescOnce sync.Once
	file_technology_dns_proto_rawDescData = file_technology_dns_proto_rawDesc
)

func file_technology_dns_proto_rawDescGZIP() []byte {
	file_technology_dns_proto_rawDescOnce.Do(func() {
		file_technology_dns_proto_rawDescData = protoimpl.X.CompressGZIP(file_technology_dns_proto_rawDescData)
	})
	return file_technology_dns_proto_rawDescData
}

var file_technology_dns_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_technology_dns_proto_goTypes = []interface{}{
	(*GetDnsHintsRequest)(nil),  // 0: technology.GetDnsHintsRequest
	(*DnsItem)(nil),             // 1: technology.DnsItem
	(*GetDnsHintsResponse)(nil), // 2: technology.GetDnsHintsResponse
	(*GetDnsByIdsRequest)(nil),  // 3: technology.GetDnsByIdsRequest
	(*GetDnsByIdsResponse)(nil), // 4: technology.GetDnsByIdsResponse
	(*FindDnsRequest)(nil),      // 5: technology.FindDnsRequest
	(*FindDnsResponse)(nil),     // 6: technology.FindDnsResponse
}
var file_technology_dns_proto_depIdxs = []int32{
	1, // 0: technology.GetDnsHintsResponse.dns:type_name -> technology.DnsItem
	1, // 1: technology.GetDnsByIdsResponse.dns:type_name -> technology.DnsItem
	5, // 2: technology.Dns.FindDns:input_type -> technology.FindDnsRequest
	3, // 3: technology.Dns.GetDnsByIds:input_type -> technology.GetDnsByIdsRequest
	0, // 4: technology.Dns.GetDnsHints:input_type -> technology.GetDnsHintsRequest
	6, // 5: technology.Dns.FindDns:output_type -> technology.FindDnsResponse
	4, // 6: technology.Dns.GetDnsByIds:output_type -> technology.GetDnsByIdsResponse
	2, // 7: technology.Dns.GetDnsHints:output_type -> technology.GetDnsHintsResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_technology_dns_proto_init() }
func file_technology_dns_proto_init() {
	if File_technology_dns_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_technology_dns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDnsHintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_dns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_dns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDnsHintsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_dns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDnsByIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_dns_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDnsByIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_dns_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_technology_dns_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_technology_dns_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_technology_dns_proto_goTypes,
		DependencyIndexes: file_technology_dns_proto_depIdxs,
		MessageInfos:      file_technology_dns_proto_msgTypes,
	}.Build()
	File_technology_dns_proto = out.File
	file_technology_dns_proto_rawDesc = nil
	file_technology_dns_proto_goTypes = nil
	file_technology_dns_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DnsClient is the client API for Dns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DnsClient interface {
	FindDns(ctx context.Context, in *FindDnsRequest, opts ...grpc.CallOption) (*FindDnsResponse, error)
	GetDnsByIds(ctx context.Context, in *GetDnsByIdsRequest, opts ...grpc.CallOption) (*GetDnsByIdsResponse, error)
	GetDnsHints(ctx context.Context, in *GetDnsHintsRequest, opts ...grpc.CallOption) (*GetDnsHintsResponse, error)
}

type dnsClient struct {
	cc grpc.ClientConnInterface
}

func NewDnsClient(cc grpc.ClientConnInterface) DnsClient {
	return &dnsClient{cc}
}

func (c *dnsClient) FindDns(ctx context.Context, in *FindDnsRequest, opts ...grpc.CallOption) (*FindDnsResponse, error) {
	out := new(FindDnsResponse)
	err := c.cc.Invoke(ctx, "/technology.Dns/FindDns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsClient) GetDnsByIds(ctx context.Context, in *GetDnsByIdsRequest, opts ...grpc.CallOption) (*GetDnsByIdsResponse, error) {
	out := new(GetDnsByIdsResponse)
	err := c.cc.Invoke(ctx, "/technology.Dns/GetDnsByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsClient) GetDnsHints(ctx context.Context, in *GetDnsHintsRequest, opts ...grpc.CallOption) (*GetDnsHintsResponse, error) {
	out := new(GetDnsHintsResponse)
	err := c.cc.Invoke(ctx, "/technology.Dns/GetDnsHints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnsServer is the server API for Dns service.
type DnsServer interface {
	FindDns(context.Context, *FindDnsRequest) (*FindDnsResponse, error)
	GetDnsByIds(context.Context, *GetDnsByIdsRequest) (*GetDnsByIdsResponse, error)
	GetDnsHints(context.Context, *GetDnsHintsRequest) (*GetDnsHintsResponse, error)
}

// UnimplementedDnsServer can be embedded to have forward compatible implementations.
type UnimplementedDnsServer struct {
}

func (*UnimplementedDnsServer) FindDns(context.Context, *FindDnsRequest) (*FindDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDns not implemented")
}
func (*UnimplementedDnsServer) GetDnsByIds(context.Context, *GetDnsByIdsRequest) (*GetDnsByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDnsByIds not implemented")
}
func (*UnimplementedDnsServer) GetDnsHints(context.Context, *GetDnsHintsRequest) (*GetDnsHintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDnsHints not implemented")
}

func RegisterDnsServer(s *grpc.Server, srv DnsServer) {
	s.RegisterService(&_Dns_serviceDesc, srv)
}

func _Dns_FindDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServer).FindDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/technology.Dns/FindDns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServer).FindDns(ctx, req.(*FindDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dns_GetDnsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDnsByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServer).GetDnsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/technology.Dns/GetDnsByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServer).GetDnsByIds(ctx, req.(*GetDnsByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dns_GetDnsHints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDnsHintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServer).GetDnsHints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/technology.Dns/GetDnsHints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServer).GetDnsHints(ctx, req.(*GetDnsHintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dns_serviceDesc = grpc.ServiceDesc{
	ServiceName: "technology.Dns",
	HandlerType: (*DnsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindDns",
			Handler:    _Dns_FindDns_Handler,
		},
		{
			MethodName: "GetDnsByIds",
			Handler:    _Dns_GetDnsByIds_Handler,
		},
		{
			MethodName: "GetDnsHints",
			Handler:    _Dns_GetDnsHints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "technology/dns.proto",
}
