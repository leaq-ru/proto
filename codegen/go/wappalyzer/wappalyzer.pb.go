// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: wappalyzer/wappalyzer.proto

package wappalyzer

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AnalyzeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *AnalyzeRequest) Reset() {
	*x = AnalyzeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wappalyzer_wappalyzer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRequest) ProtoMessage() {}

func (x *AnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wappalyzer_wappalyzer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_wappalyzer_wappalyzer_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyzeRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Url struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Url) Reset() {
	*x = Url{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wappalyzer_wappalyzer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Url) ProtoMessage() {}

func (x *Url) ProtoReflect() protoreflect.Message {
	mi := &file_wappalyzer_wappalyzer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Url.ProtoReflect.Descriptor instead.
func (*Url) Descriptor() ([]byte, []int) {
	return file_wappalyzer_wappalyzer_proto_rawDescGZIP(), []int{1}
}

func (x *Url) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wappalyzer_wappalyzer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_wappalyzer_wappalyzer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_wappalyzer_wappalyzer_proto_rawDescGZIP(), []int{2}
}

func (x *Category) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Category) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Technology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug       string      `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Name       string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Confidence uint32      `protobuf:"varint,3,opt,name=confidence,proto3" json:"confidence,omitempty"`
	Version    string      `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Icon       string      `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Website    string      `protobuf:"bytes,6,opt,name=website,proto3" json:"website,omitempty"`
	Cpe        string      `protobuf:"bytes,7,opt,name=cpe,proto3" json:"cpe,omitempty"`
	Categories []*Category `protobuf:"bytes,8,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *Technology) Reset() {
	*x = Technology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wappalyzer_wappalyzer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Technology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Technology) ProtoMessage() {}

func (x *Technology) ProtoReflect() protoreflect.Message {
	mi := &file_wappalyzer_wappalyzer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Technology.ProtoReflect.Descriptor instead.
func (*Technology) Descriptor() ([]byte, []int) {
	return file_wappalyzer_wappalyzer_proto_rawDescGZIP(), []int{3}
}

func (x *Technology) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Technology) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Technology) GetConfidence() uint32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *Technology) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Technology) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Technology) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Technology) GetCpe() string {
	if x != nil {
		return x.Cpe
	}
	return ""
}

func (x *Technology) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type AnalyzeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls         map[string]*Url `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Technologies []*Technology   `protobuf:"bytes,2,rep,name=technologies,proto3" json:"technologies,omitempty"`
}

func (x *AnalyzeResponse) Reset() {
	*x = AnalyzeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wappalyzer_wappalyzer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResponse) ProtoMessage() {}

func (x *AnalyzeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wappalyzer_wappalyzer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeResponse) Descriptor() ([]byte, []int) {
	return file_wappalyzer_wappalyzer_proto_rawDescGZIP(), []int{4}
}

func (x *AnalyzeResponse) GetUrls() map[string]*Url {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *AnalyzeResponse) GetTechnologies() []*Technology {
	if x != nil {
		return x.Technologies
	}
	return nil
}

var File_wappalyzer_wappalyzer_proto protoreflect.FileDescriptor

var file_wappalyzer_wappalyzer_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x77, 0x61, 0x70, 0x70, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2f, 0x77, 0x61, 0x70,
	0x70, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x77,
	0x61, 0x70, 0x70, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x0e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x1d, 0x0a,
	0x03, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xe4, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x61, 0x70, 0x70, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x61, 0x70, 0x70,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77,
	0x61, 0x70, 0x70, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x52, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x1a, 0x48, 0x0a, 0x09, 0x55, 0x72, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x77, 0x61, 0x70, 0x70, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x55, 0x72,
	0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x52, 0x0a, 0x0a,
	0x57, 0x61, 0x70, 0x70, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x70, 0x70, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x61, 0x70, 0x70, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x65, 0x61, 0x71, 0x2d, 0x72, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x77, 0x61, 0x70, 0x70, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wappalyzer_wappalyzer_proto_rawDescOnce sync.Once
	file_wappalyzer_wappalyzer_proto_rawDescData = file_wappalyzer_wappalyzer_proto_rawDesc
)

func file_wappalyzer_wappalyzer_proto_rawDescGZIP() []byte {
	file_wappalyzer_wappalyzer_proto_rawDescOnce.Do(func() {
		file_wappalyzer_wappalyzer_proto_rawDescData = protoimpl.X.CompressGZIP(file_wappalyzer_wappalyzer_proto_rawDescData)
	})
	return file_wappalyzer_wappalyzer_proto_rawDescData
}

var file_wappalyzer_wappalyzer_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_wappalyzer_wappalyzer_proto_goTypes = []interface{}{
	(*AnalyzeRequest)(nil),  // 0: wappalyzer.AnalyzeRequest
	(*Url)(nil),             // 1: wappalyzer.Url
	(*Category)(nil),        // 2: wappalyzer.Category
	(*Technology)(nil),      // 3: wappalyzer.Technology
	(*AnalyzeResponse)(nil), // 4: wappalyzer.AnalyzeResponse
	nil,                     // 5: wappalyzer.AnalyzeResponse.UrlsEntry
}
var file_wappalyzer_wappalyzer_proto_depIdxs = []int32{
	2, // 0: wappalyzer.Technology.categories:type_name -> wappalyzer.Category
	5, // 1: wappalyzer.AnalyzeResponse.urls:type_name -> wappalyzer.AnalyzeResponse.UrlsEntry
	3, // 2: wappalyzer.AnalyzeResponse.technologies:type_name -> wappalyzer.Technology
	1, // 3: wappalyzer.AnalyzeResponse.UrlsEntry.value:type_name -> wappalyzer.Url
	0, // 4: wappalyzer.Wappalyzer.Analyze:input_type -> wappalyzer.AnalyzeRequest
	4, // 5: wappalyzer.Wappalyzer.Analyze:output_type -> wappalyzer.AnalyzeResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_wappalyzer_wappalyzer_proto_init() }
func file_wappalyzer_wappalyzer_proto_init() {
	if File_wappalyzer_wappalyzer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wappalyzer_wappalyzer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wappalyzer_wappalyzer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Url); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wappalyzer_wappalyzer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wappalyzer_wappalyzer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Technology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wappalyzer_wappalyzer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wappalyzer_wappalyzer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wappalyzer_wappalyzer_proto_goTypes,
		DependencyIndexes: file_wappalyzer_wappalyzer_proto_depIdxs,
		MessageInfos:      file_wappalyzer_wappalyzer_proto_msgTypes,
	}.Build()
	File_wappalyzer_wappalyzer_proto = out.File
	file_wappalyzer_wappalyzer_proto_rawDesc = nil
	file_wappalyzer_wappalyzer_proto_goTypes = nil
	file_wappalyzer_wappalyzer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WappalyzerClient is the client API for Wappalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WappalyzerClient interface {
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error)
}

type wappalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewWappalyzerClient(cc grpc.ClientConnInterface) WappalyzerClient {
	return &wappalyzerClient{cc}
}

func (c *wappalyzerClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := c.cc.Invoke(ctx, "/wappalyzer.Wappalyzer/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WappalyzerServer is the server API for Wappalyzer service.
type WappalyzerServer interface {
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error)
}

// UnimplementedWappalyzerServer can be embedded to have forward compatible implementations.
type UnimplementedWappalyzerServer struct {
}

func (*UnimplementedWappalyzerServer) Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}

func RegisterWappalyzerServer(s *grpc.Server, srv WappalyzerServer) {
	s.RegisterService(&_Wappalyzer_serviceDesc, srv)
}

func _Wappalyzer_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WappalyzerServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wappalyzer.Wappalyzer/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WappalyzerServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wappalyzer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wappalyzer.Wappalyzer",
	HandlerType: (*WappalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _Wappalyzer_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wappalyzer/wappalyzer.proto",
}
