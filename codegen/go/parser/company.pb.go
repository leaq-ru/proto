// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: parser/company.proto

package parser

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	opts "github.com/nnqq/scr-proto/codegen/go/opts"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Select int32

const (
	Select_ANY Select = 0
	Select_YES Select = 1
	Select_NO  Select = 2
)

// Enum value maps for Select.
var (
	Select_name = map[int32]string{
		0: "ANY",
		1: "YES",
		2: "NO",
	}
	Select_value = map[string]int32{
		"ANY": 0,
		"YES": 1,
		"NO":  2,
	}
)

func (x Select) Enum() *Select {
	p := new(Select)
	*p = x
	return p
}

func (x Select) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Select) Descriptor() protoreflect.EnumDescriptor {
	return file_parser_company_proto_enumTypes[0].Descriptor()
}

func (Select) Type() protoreflect.EnumType {
	return &file_parser_company_proto_enumTypes[0]
}

func (x Select) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Select.Descriptor instead.
func (Select) EnumDescriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{0}
}

type FindRule int32

const (
	FindRule_ONE_OF FindRule = 0
	FindRule_ALL    FindRule = 1
)

// Enum value maps for FindRule.
var (
	FindRule_name = map[int32]string{
		0: "ONE_OF",
		1: "ALL",
	}
	FindRule_value = map[string]int32{
		"ONE_OF": 0,
		"ALL":    1,
	}
)

func (x FindRule) Enum() *FindRule {
	p := new(FindRule)
	*p = x
	return p
}

func (x FindRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindRule) Descriptor() protoreflect.EnumDescriptor {
	return file_parser_company_proto_enumTypes[1].Descriptor()
}

func (FindRule) Type() protoreflect.EnumType {
	return &file_parser_company_proto_enumTypes[1]
}

func (x FindRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindRule.Descriptor instead.
func (FindRule) EnumDescriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{1}
}

type Sex int32

const (
	Sex_NONE   Sex = 0
	Sex_FEMALE Sex = 1
	Sex_MALE   Sex = 2
)

// Enum value maps for Sex.
var (
	Sex_name = map[int32]string{
		0: "NONE",
		1: "FEMALE",
		2: "MALE",
	}
	Sex_value = map[string]int32{
		"NONE":   0,
		"FEMALE": 1,
		"MALE":   2,
	}
)

func (x Sex) Enum() *Sex {
	p := new(Sex)
	*p = x
	return p
}

func (x Sex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sex) Descriptor() protoreflect.EnumDescriptor {
	return file_parser_company_proto_enumTypes[2].Descriptor()
}

func (Sex) Type() protoreflect.EnumType {
	return &file_parser_company_proto_enumTypes[2]
}

func (x Sex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sex.Descriptor instead.
func (Sex) EnumDescriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{2}
}

type IsClosed int32

const (
	IsClosed_OPEN    IsClosed = 0
	IsClosed_CLOSE   IsClosed = 1
	IsClosed_PRIVATE IsClosed = 2
)

// Enum value maps for IsClosed.
var (
	IsClosed_name = map[int32]string{
		0: "OPEN",
		1: "CLOSE",
		2: "PRIVATE",
	}
	IsClosed_value = map[string]int32{
		"OPEN":    0,
		"CLOSE":   1,
		"PRIVATE": 2,
	}
)

func (x IsClosed) Enum() *IsClosed {
	p := new(IsClosed)
	*p = x
	return p
}

func (x IsClosed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsClosed) Descriptor() protoreflect.EnumDescriptor {
	return file_parser_company_proto_enumTypes[3].Descriptor()
}

func (IsClosed) Type() protoreflect.EnumType {
	return &file_parser_company_proto_enumTypes[3]
}

func (x IsClosed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsClosed.Descriptor instead.
func (IsClosed) EnumDescriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{3}
}

type SetHiddenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slugs []string `protobuf:"bytes,1,rep,name=slugs,proto3" json:"slugs,omitempty"`
}

func (x *SetHiddenRequest) Reset() {
	*x = SetHiddenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHiddenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHiddenRequest) ProtoMessage() {}

func (x *SetHiddenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHiddenRequest.ProtoReflect.Descriptor instead.
func (*SetHiddenRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{0}
}

func (x *SetHiddenRequest) GetSlugs() []string {
	if x != nil {
		return x.Slugs
	}
	return nil
}

type GetFullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId string        `protobuf:"bytes,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Query  *GetV2Request `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetFullRequest) Reset() {
	*x = GetFullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullRequest) ProtoMessage() {}

func (x *GetFullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullRequest.ProtoReflect.Descriptor instead.
func (*GetFullRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{1}
}

func (x *GetFullRequest) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *GetFullRequest) GetQuery() *GetV2Request {
	if x != nil {
		return x.Query
	}
	return nil
}

type GetCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetCountResponse) Reset() {
	*x = GetCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCountResponse) ProtoMessage() {}

func (x *GetCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCountResponse.ProtoReflect.Descriptor instead.
func (*GetCountResponse) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{2}
}

func (x *GetCountResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FullCompanyV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Category             *CategoryItem           `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Url                  string                  `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Slug                 string                  `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Title                string                  `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Email                string                  `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Description          string                  `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Online               bool                    `protobuf:"varint,8,opt,name=online,proto3" json:"online,omitempty"`
	Phone                float64                 `protobuf:"fixed64,9,opt,name=phone,proto3" json:"phone,omitempty"`
	Inn                  float64                 `protobuf:"fixed64,10,opt,name=inn,proto3" json:"inn,omitempty"`
	Kpp                  float64                 `protobuf:"fixed64,11,opt,name=kpp,proto3" json:"kpp,omitempty"`
	Ogrn                 float64                 `protobuf:"fixed64,12,opt,name=ogrn,proto3" json:"ogrn,omitempty"`
	Domain               *Domain                 `protobuf:"bytes,13,opt,name=domain,proto3" json:"domain,omitempty"`
	Avatar               string                  `protobuf:"bytes,14,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Location             *FullLocation           `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty"`
	App                  *App                    `protobuf:"bytes,16,opt,name=app,proto3" json:"app,omitempty"`
	Social               *Social                 `protobuf:"bytes,17,opt,name=social,proto3" json:"social,omitempty"`
	People               []*People               `protobuf:"bytes,18,rep,name=people,proto3" json:"people,omitempty"`
	UpdatedAt            string                  `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TechnologyCategories []*TechCategoryInverted `protobuf:"bytes,20,rep,name=technology_categories,json=technologyCategories,proto3" json:"technology_categories,omitempty"`
	// milliseconds
	PageSpeed uint32 `protobuf:"varint,21,opt,name=page_speed,json=pageSpeed,proto3" json:"page_speed,omitempty"`
	// company has owner
	Verified bool       `protobuf:"varint,22,opt,name=verified,proto3" json:"verified,omitempty"`
	Premium  bool       `protobuf:"varint,23,opt,name=premium,proto3" json:"premium,omitempty"`
	Dns      []*DnsItem `protobuf:"bytes,24,rep,name=dns,proto3" json:"dns,omitempty"`
}

func (x *FullCompanyV2) Reset() {
	*x = FullCompanyV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullCompanyV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullCompanyV2) ProtoMessage() {}

func (x *FullCompanyV2) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullCompanyV2.ProtoReflect.Descriptor instead.
func (*FullCompanyV2) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{3}
}

func (x *FullCompanyV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FullCompanyV2) GetCategory() *CategoryItem {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *FullCompanyV2) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FullCompanyV2) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *FullCompanyV2) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FullCompanyV2) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FullCompanyV2) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FullCompanyV2) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *FullCompanyV2) GetPhone() float64 {
	if x != nil {
		return x.Phone
	}
	return 0
}

func (x *FullCompanyV2) GetInn() float64 {
	if x != nil {
		return x.Inn
	}
	return 0
}

func (x *FullCompanyV2) GetKpp() float64 {
	if x != nil {
		return x.Kpp
	}
	return 0
}

func (x *FullCompanyV2) GetOgrn() float64 {
	if x != nil {
		return x.Ogrn
	}
	return 0
}

func (x *FullCompanyV2) GetDomain() *Domain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *FullCompanyV2) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *FullCompanyV2) GetLocation() *FullLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FullCompanyV2) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *FullCompanyV2) GetSocial() *Social {
	if x != nil {
		return x.Social
	}
	return nil
}

func (x *FullCompanyV2) GetPeople() []*People {
	if x != nil {
		return x.People
	}
	return nil
}

func (x *FullCompanyV2) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *FullCompanyV2) GetTechnologyCategories() []*TechCategoryInverted {
	if x != nil {
		return x.TechnologyCategories
	}
	return nil
}

func (x *FullCompanyV2) GetPageSpeed() uint32 {
	if x != nil {
		return x.PageSpeed
	}
	return 0
}

func (x *FullCompanyV2) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *FullCompanyV2) GetPremium() bool {
	if x != nil {
		return x.Premium
	}
	return false
}

func (x *FullCompanyV2) GetDns() []*DnsItem {
	if x != nil {
		return x.Dns
	}
	return nil
}

type RenewCompanyPremiumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId   string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	MonthAmount uint32 `protobuf:"varint,2,opt,name=month_amount,json=monthAmount,proto3" json:"month_amount,omitempty"`
}

func (x *RenewCompanyPremiumRequest) Reset() {
	*x = RenewCompanyPremiumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewCompanyPremiumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewCompanyPremiumRequest) ProtoMessage() {}

func (x *RenewCompanyPremiumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewCompanyPremiumRequest.ProtoReflect.Descriptor instead.
func (*RenewCompanyPremiumRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{4}
}

func (x *RenewCompanyPremiumRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *RenewCompanyPremiumRequest) GetMonthAmount() uint32 {
	if x != nil {
		return x.MonthAmount
	}
	return 0
}

type EditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId     string                  `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Title         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Email         *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Phone         *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	AddressStreet *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=address_street,json=addressStreet,proto3" json:"address_street,omitempty"`
	AddressHouse  *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=address_house,json=addressHouse,proto3" json:"address_house,omitempty"`
	VkUrl         *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=vk_url,json=vkUrl,proto3" json:"vk_url,omitempty"`
	InstagramUrl  *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=instagram_url,json=instagramUrl,proto3" json:"instagram_url,omitempty"`
	YoutubeUrl    *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=youtube_url,json=youtubeUrl,proto3" json:"youtube_url,omitempty"`
	FacebookUrl   *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=facebook_url,json=facebookUrl,proto3" json:"facebook_url,omitempty"`
	TwitterUrl    *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=twitter_url,json=twitterUrl,proto3" json:"twitter_url,omitempty"`
	AppStoreUrl   *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=app_store_url,json=appStoreUrl,proto3" json:"app_store_url,omitempty"`
	GooglePlayUrl *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=google_play_url,json=googlePlayUrl,proto3" json:"google_play_url,omitempty"`
	Inn           *wrapperspb.DoubleValue `protobuf:"bytes,15,opt,name=inn,proto3" json:"inn,omitempty"`
	Kpp           *wrapperspb.DoubleValue `protobuf:"bytes,16,opt,name=kpp,proto3" json:"kpp,omitempty"`
	Ogrn          *wrapperspb.DoubleValue `protobuf:"bytes,17,opt,name=ogrn,proto3" json:"ogrn,omitempty"`
	AvatarBase64  *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=avatar_base64,json=avatarBase64,proto3" json:"avatar_base64,omitempty"`
	CityId        *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	CategoryId    *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *EditRequest) Reset() {
	*x = EditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditRequest) ProtoMessage() {}

func (x *EditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditRequest.ProtoReflect.Descriptor instead.
func (*EditRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{5}
}

func (x *EditRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *EditRequest) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *EditRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *EditRequest) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *EditRequest) GetPhone() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *EditRequest) GetAddressStreet() *wrapperspb.StringValue {
	if x != nil {
		return x.AddressStreet
	}
	return nil
}

func (x *EditRequest) GetAddressHouse() *wrapperspb.StringValue {
	if x != nil {
		return x.AddressHouse
	}
	return nil
}

func (x *EditRequest) GetVkUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.VkUrl
	}
	return nil
}

func (x *EditRequest) GetInstagramUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.InstagramUrl
	}
	return nil
}

func (x *EditRequest) GetYoutubeUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.YoutubeUrl
	}
	return nil
}

func (x *EditRequest) GetFacebookUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.FacebookUrl
	}
	return nil
}

func (x *EditRequest) GetTwitterUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.TwitterUrl
	}
	return nil
}

func (x *EditRequest) GetAppStoreUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.AppStoreUrl
	}
	return nil
}

func (x *EditRequest) GetGooglePlayUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.GooglePlayUrl
	}
	return nil
}

func (x *EditRequest) GetInn() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Inn
	}
	return nil
}

func (x *EditRequest) GetKpp() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Kpp
	}
	return nil
}

func (x *EditRequest) GetOgrn() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Ogrn
	}
	return nil
}

func (x *EditRequest) GetAvatarBase64() *wrapperspb.StringValue {
	if x != nil {
		return x.AvatarBase64
	}
	return nil
}

func (x *EditRequest) GetCityId() *wrapperspb.StringValue {
	if x != nil {
		return x.CityId
	}
	return nil
}

func (x *EditRequest) GetCategoryId() *wrapperspb.StringValue {
	if x != nil {
		return x.CategoryId
	}
	return nil
}

type GetMyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opts *opts.SkipLimit `protobuf:"bytes,1,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (x *GetMyRequest) Reset() {
	*x = GetMyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyRequest) ProtoMessage() {}

func (x *GetMyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyRequest.ProtoReflect.Descriptor instead.
func (*GetMyRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{6}
}

func (x *GetMyRequest) GetOpts() *opts.SkipLimit {
	if x != nil {
		return x.Opts
	}
	return nil
}

type GetByRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *GetByRequest) Reset() {
	*x = GetByRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByRequest) ProtoMessage() {}

func (x *GetByRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByRequest.ProtoReflect.Descriptor instead.
func (*GetByRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{7}
}

func (x *GetByRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetByRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type GetManyByRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyIds []string `protobuf:"bytes,1,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *GetManyByRequest) Reset() {
	*x = GetManyByRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManyByRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManyByRequest) ProtoMessage() {}

func (x *GetManyByRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManyByRequest.ProtoReflect.Descriptor instead.
func (*GetManyByRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{8}
}

func (x *GetManyByRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type GetTotalCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount uint32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *GetTotalCountResponse) Reset() {
	*x = GetTotalCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalCountResponse) ProtoMessage() {}

func (x *GetTotalCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalCountResponse.ProtoReflect.Descriptor instead.
func (*GetTotalCountResponse) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{9}
}

func (x *GetTotalCountResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetBySlugsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opts           *opts.Page `protobuf:"bytes,1,opt,name=opts,proto3" json:"opts,omitempty"`
	CitySlug       string     `protobuf:"bytes,2,opt,name=city_slug,json=citySlug,proto3" json:"city_slug,omitempty"`
	CategorySlug   string     `protobuf:"bytes,3,opt,name=category_slug,json=categorySlug,proto3" json:"category_slug,omitempty"`
	TechnologySlug string     `protobuf:"bytes,4,opt,name=technology_slug,json=technologySlug,proto3" json:"technology_slug,omitempty"`
}

func (x *GetBySlugsRequest) Reset() {
	*x = GetBySlugsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBySlugsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBySlugsRequest) ProtoMessage() {}

func (x *GetBySlugsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBySlugsRequest.ProtoReflect.Descriptor instead.
func (*GetBySlugsRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{10}
}

func (x *GetBySlugsRequest) GetOpts() *opts.Page {
	if x != nil {
		return x.Opts
	}
	return nil
}

func (x *GetBySlugsRequest) GetCitySlug() string {
	if x != nil {
		return x.CitySlug
	}
	return ""
}

func (x *GetBySlugsRequest) GetCategorySlug() string {
	if x != nil {
		return x.CategorySlug
	}
	return ""
}

func (x *GetBySlugsRequest) GetTechnologySlug() string {
	if x != nil {
		return x.TechnologySlug
	}
	return ""
}

type IsCompanyAvatarExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarS3Url string `protobuf:"bytes,1,opt,name=avatar_s3_url,json=avatarS3Url,proto3" json:"avatar_s3_url,omitempty"`
}

func (x *IsCompanyAvatarExistsRequest) Reset() {
	*x = IsCompanyAvatarExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCompanyAvatarExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCompanyAvatarExistsRequest) ProtoMessage() {}

func (x *IsCompanyAvatarExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCompanyAvatarExistsRequest.ProtoReflect.Descriptor instead.
func (*IsCompanyAvatarExistsRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{11}
}

func (x *IsCompanyAvatarExistsRequest) GetAvatarS3Url() string {
	if x != nil {
		return x.AvatarS3Url
	}
	return ""
}

type IsCompanyAvatarExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsExists bool `protobuf:"varint,1,opt,name=is_exists,json=isExists,proto3" json:"is_exists,omitempty"`
}

func (x *IsCompanyAvatarExistsResponse) Reset() {
	*x = IsCompanyAvatarExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCompanyAvatarExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCompanyAvatarExistsResponse) ProtoMessage() {}

func (x *IsCompanyAvatarExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCompanyAvatarExistsResponse.ProtoReflect.Descriptor instead.
func (*IsCompanyAvatarExistsResponse) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{12}
}

func (x *IsCompanyAvatarExistsResponse) GetIsExists() bool {
	if x != nil {
		return x.IsExists
	}
	return false
}

type ReindexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url              string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Registrar        string                 `protobuf:"bytes,2,opt,name=registrar,proto3" json:"registrar,omitempty"`
	RegistrationDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date,omitempty"`
}

func (x *ReindexRequest) Reset() {
	*x = ReindexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReindexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReindexRequest) ProtoMessage() {}

func (x *ReindexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReindexRequest.ProtoReflect.Descriptor instead.
func (*ReindexRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{13}
}

func (x *ReindexRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ReindexRequest) GetRegistrar() string {
	if x != nil {
		return x.Registrar
	}
	return ""
}

func (x *ReindexRequest) GetRegistrationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RegistrationDate
	}
	return nil
}

type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityIds            []string        `protobuf:"bytes,1,rep,name=city_ids,json=cityIds,proto3" json:"city_ids,omitempty"`
	CategoryIds        []string        `protobuf:"bytes,2,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
	HasEmail           Select          `protobuf:"varint,3,opt,name=has_email,json=hasEmail,proto3,enum=parser.Select" json:"has_email,omitempty"`
	HasPhone           Select          `protobuf:"varint,4,opt,name=has_phone,json=hasPhone,proto3,enum=parser.Select" json:"has_phone,omitempty"`
	HasOnline          Select          `protobuf:"varint,5,opt,name=has_online,json=hasOnline,proto3,enum=parser.Select" json:"has_online,omitempty"`
	HasInn             Select          `protobuf:"varint,6,opt,name=has_inn,json=hasInn,proto3,enum=parser.Select" json:"has_inn,omitempty"`
	HasKpp             Select          `protobuf:"varint,7,opt,name=has_kpp,json=hasKpp,proto3,enum=parser.Select" json:"has_kpp,omitempty"`
	HasOgrn            Select          `protobuf:"varint,8,opt,name=has_ogrn,json=hasOgrn,proto3,enum=parser.Select" json:"has_ogrn,omitempty"`
	HasAppStore        Select          `protobuf:"varint,9,opt,name=has_app_store,json=hasAppStore,proto3,enum=parser.Select" json:"has_app_store,omitempty"`
	HasGooglePlay      Select          `protobuf:"varint,10,opt,name=has_google_play,json=hasGooglePlay,proto3,enum=parser.Select" json:"has_google_play,omitempty"`
	HasVk              Select          `protobuf:"varint,11,opt,name=has_vk,json=hasVk,proto3,enum=parser.Select" json:"has_vk,omitempty"`
	VkMembersCount     *VkMembersCount `protobuf:"bytes,12,opt,name=vk_members_count,json=vkMembersCount,proto3" json:"vk_members_count,omitempty"`
	HasInstagram       Select          `protobuf:"varint,13,opt,name=has_instagram,json=hasInstagram,proto3,enum=parser.Select" json:"has_instagram,omitempty"`
	HasTwitter         Select          `protobuf:"varint,14,opt,name=has_twitter,json=hasTwitter,proto3,enum=parser.Select" json:"has_twitter,omitempty"`
	HasYoutube         Select          `protobuf:"varint,15,opt,name=has_youtube,json=hasYoutube,proto3,enum=parser.Select" json:"has_youtube,omitempty"`
	HasFacebook        Select          `protobuf:"varint,16,opt,name=has_facebook,json=hasFacebook,proto3,enum=parser.Select" json:"has_facebook,omitempty"`
	TechnologyIds      []string        `protobuf:"bytes,17,rep,name=technology_ids,json=technologyIds,proto3" json:"technology_ids,omitempty"`
	TechnologyFindRule FindRule        `protobuf:"varint,18,opt,name=technology_find_rule,json=technologyFindRule,proto3,enum=parser.FindRule" json:"technology_find_rule,omitempty"`
	DnsIds             []string        `protobuf:"bytes,19,rep,name=dns_ids,json=dnsIds,proto3" json:"dns_ids,omitempty"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{14}
}

func (x *GetListRequest) GetCityIds() []string {
	if x != nil {
		return x.CityIds
	}
	return nil
}

func (x *GetListRequest) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *GetListRequest) GetHasEmail() Select {
	if x != nil {
		return x.HasEmail
	}
	return Select_ANY
}

func (x *GetListRequest) GetHasPhone() Select {
	if x != nil {
		return x.HasPhone
	}
	return Select_ANY
}

func (x *GetListRequest) GetHasOnline() Select {
	if x != nil {
		return x.HasOnline
	}
	return Select_ANY
}

func (x *GetListRequest) GetHasInn() Select {
	if x != nil {
		return x.HasInn
	}
	return Select_ANY
}

func (x *GetListRequest) GetHasKpp() Select {
	if x != nil {
		return x.HasKpp
	}
	return Select_ANY
}

func (x *GetListRequest) GetHasOgrn() Select {
	if x != nil {
		return x.HasOgrn
	}
	return Select_ANY
}

func (x *GetListRequest) GetHasAppStore() Select {
	if x != nil {
		return x.HasAppStore
	}
	return Select_ANY
}

func (x *GetListRequest) GetHasGooglePlay() Select {
	if x != nil {
		return x.HasGooglePlay
	}
	return Select_ANY
}

func (x *GetListRequest) GetHasVk() Select {
	if x != nil {
		return x.HasVk
	}
	return Select_ANY
}

func (x *GetListRequest) GetVkMembersCount() *VkMembersCount {
	if x != nil {
		return x.VkMembersCount
	}
	return nil
}

func (x *GetListRequest) GetHasInstagram() Select {
	if x != nil {
		return x.HasInstagram
	}
	return Select_ANY
}

func (x *GetListRequest) GetHasTwitter() Select {
	if x != nil {
		return x.HasTwitter
	}
	return Select_ANY
}

func (x *GetListRequest) GetHasYoutube() Select {
	if x != nil {
		return x.HasYoutube
	}
	return Select_ANY
}

func (x *GetListRequest) GetHasFacebook() Select {
	if x != nil {
		return x.HasFacebook
	}
	return Select_ANY
}

func (x *GetListRequest) GetTechnologyIds() []string {
	if x != nil {
		return x.TechnologyIds
	}
	return nil
}

func (x *GetListRequest) GetTechnologyFindRule() FindRule {
	if x != nil {
		return x.TechnologyFindRule
	}
	return FindRule_ONE_OF
}

func (x *GetListRequest) GetDnsIds() []string {
	if x != nil {
		return x.DnsIds
	}
	return nil
}

type GetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrl string `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
}

func (x *GetListResponse) Reset() {
	*x = GetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponse) ProtoMessage() {}

func (x *GetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponse.ProtoReflect.Descriptor instead.
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{15}
}

func (x *GetListResponse) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

type GetRelatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	CityId     string `protobuf:"bytes,2,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	CategoryId string `protobuf:"bytes,3,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *GetRelatedRequest) Reset() {
	*x = GetRelatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedRequest) ProtoMessage() {}

func (x *GetRelatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedRequest.ProtoReflect.Descriptor instead.
func (*GetRelatedRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{16}
}

func (x *GetRelatedRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRelatedRequest) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *GetRelatedRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type GetRelatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies []*FullCompany `protobuf:"bytes,1,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (x *GetRelatedResponse) Reset() {
	*x = GetRelatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedResponse) ProtoMessage() {}

func (x *GetRelatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedResponse.ProtoReflect.Descriptor instead.
func (*GetRelatedResponse) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{17}
}

func (x *GetRelatedResponse) GetCompanies() []*FullCompany {
	if x != nil {
		return x.Companies
	}
	return nil
}

type VkMembersCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From uint32 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To   uint32 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *VkMembersCount) Reset() {
	*x = VkMembersCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VkMembersCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VkMembersCount) ProtoMessage() {}

func (x *VkMembersCount) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VkMembersCount.ProtoReflect.Descriptor instead.
func (*VkMembersCount) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{18}
}

func (x *VkMembersCount) GetFrom() uint32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *VkMembersCount) GetTo() uint32 {
	if x != nil {
		return x.To
	}
	return 0
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opts               *opts.Opts      `protobuf:"bytes,1,opt,name=opts,proto3" json:"opts,omitempty"`
	CityIds            []string        `protobuf:"bytes,2,rep,name=city_ids,json=cityIds,proto3" json:"city_ids,omitempty"`
	CategoryIds        []string        `protobuf:"bytes,3,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
	HasEmail           Select          `protobuf:"varint,4,opt,name=has_email,json=hasEmail,proto3,enum=parser.Select" json:"has_email,omitempty"`
	HasPhone           Select          `protobuf:"varint,5,opt,name=has_phone,json=hasPhone,proto3,enum=parser.Select" json:"has_phone,omitempty"`
	HasOnline          Select          `protobuf:"varint,6,opt,name=has_online,json=hasOnline,proto3,enum=parser.Select" json:"has_online,omitempty"`
	HasInn             Select          `protobuf:"varint,7,opt,name=has_inn,json=hasInn,proto3,enum=parser.Select" json:"has_inn,omitempty"`
	HasKpp             Select          `protobuf:"varint,8,opt,name=has_kpp,json=hasKpp,proto3,enum=parser.Select" json:"has_kpp,omitempty"`
	HasOgrn            Select          `protobuf:"varint,9,opt,name=has_ogrn,json=hasOgrn,proto3,enum=parser.Select" json:"has_ogrn,omitempty"`
	HasAppStore        Select          `protobuf:"varint,10,opt,name=has_app_store,json=hasAppStore,proto3,enum=parser.Select" json:"has_app_store,omitempty"`
	HasGooglePlay      Select          `protobuf:"varint,11,opt,name=has_google_play,json=hasGooglePlay,proto3,enum=parser.Select" json:"has_google_play,omitempty"`
	HasVk              Select          `protobuf:"varint,12,opt,name=has_vk,json=hasVk,proto3,enum=parser.Select" json:"has_vk,omitempty"`
	VkMembersCount     *VkMembersCount `protobuf:"bytes,13,opt,name=vk_members_count,json=vkMembersCount,proto3" json:"vk_members_count,omitempty"`
	HasInstagram       Select          `protobuf:"varint,14,opt,name=has_instagram,json=hasInstagram,proto3,enum=parser.Select" json:"has_instagram,omitempty"`
	HasTwitter         Select          `protobuf:"varint,15,opt,name=has_twitter,json=hasTwitter,proto3,enum=parser.Select" json:"has_twitter,omitempty"`
	HasYoutube         Select          `protobuf:"varint,16,opt,name=has_youtube,json=hasYoutube,proto3,enum=parser.Select" json:"has_youtube,omitempty"`
	HasFacebook        Select          `protobuf:"varint,17,opt,name=has_facebook,json=hasFacebook,proto3,enum=parser.Select" json:"has_facebook,omitempty"`
	ExcludeIds         []string        `protobuf:"bytes,18,rep,name=exclude_ids,json=excludeIds,proto3" json:"exclude_ids,omitempty"`
	TechnologyIds      []string        `protobuf:"bytes,19,rep,name=technology_ids,json=technologyIds,proto3" json:"technology_ids,omitempty"`
	TechnologyFindRule FindRule        `protobuf:"varint,20,opt,name=technology_find_rule,json=technologyFindRule,proto3,enum=parser.FindRule" json:"technology_find_rule,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{19}
}

func (x *GetRequest) GetOpts() *opts.Opts {
	if x != nil {
		return x.Opts
	}
	return nil
}

func (x *GetRequest) GetCityIds() []string {
	if x != nil {
		return x.CityIds
	}
	return nil
}

func (x *GetRequest) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *GetRequest) GetHasEmail() Select {
	if x != nil {
		return x.HasEmail
	}
	return Select_ANY
}

func (x *GetRequest) GetHasPhone() Select {
	if x != nil {
		return x.HasPhone
	}
	return Select_ANY
}

func (x *GetRequest) GetHasOnline() Select {
	if x != nil {
		return x.HasOnline
	}
	return Select_ANY
}

func (x *GetRequest) GetHasInn() Select {
	if x != nil {
		return x.HasInn
	}
	return Select_ANY
}

func (x *GetRequest) GetHasKpp() Select {
	if x != nil {
		return x.HasKpp
	}
	return Select_ANY
}

func (x *GetRequest) GetHasOgrn() Select {
	if x != nil {
		return x.HasOgrn
	}
	return Select_ANY
}

func (x *GetRequest) GetHasAppStore() Select {
	if x != nil {
		return x.HasAppStore
	}
	return Select_ANY
}

func (x *GetRequest) GetHasGooglePlay() Select {
	if x != nil {
		return x.HasGooglePlay
	}
	return Select_ANY
}

func (x *GetRequest) GetHasVk() Select {
	if x != nil {
		return x.HasVk
	}
	return Select_ANY
}

func (x *GetRequest) GetVkMembersCount() *VkMembersCount {
	if x != nil {
		return x.VkMembersCount
	}
	return nil
}

func (x *GetRequest) GetHasInstagram() Select {
	if x != nil {
		return x.HasInstagram
	}
	return Select_ANY
}

func (x *GetRequest) GetHasTwitter() Select {
	if x != nil {
		return x.HasTwitter
	}
	return Select_ANY
}

func (x *GetRequest) GetHasYoutube() Select {
	if x != nil {
		return x.HasYoutube
	}
	return Select_ANY
}

func (x *GetRequest) GetHasFacebook() Select {
	if x != nil {
		return x.HasFacebook
	}
	return Select_ANY
}

func (x *GetRequest) GetExcludeIds() []string {
	if x != nil {
		return x.ExcludeIds
	}
	return nil
}

func (x *GetRequest) GetTechnologyIds() []string {
	if x != nil {
		return x.TechnologyIds
	}
	return nil
}

func (x *GetRequest) GetTechnologyFindRule() FindRule {
	if x != nil {
		return x.TechnologyFindRule
	}
	return FindRule_ONE_OF
}

type GetV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opts               *opts.Page      `protobuf:"bytes,1,opt,name=opts,proto3" json:"opts,omitempty"`
	CityIds            []string        `protobuf:"bytes,2,rep,name=city_ids,json=cityIds,proto3" json:"city_ids,omitempty"`
	CategoryIds        []string        `protobuf:"bytes,3,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
	HasEmail           Select          `protobuf:"varint,4,opt,name=has_email,json=hasEmail,proto3,enum=parser.Select" json:"has_email,omitempty"`
	HasPhone           Select          `protobuf:"varint,5,opt,name=has_phone,json=hasPhone,proto3,enum=parser.Select" json:"has_phone,omitempty"`
	HasOnline          Select          `protobuf:"varint,6,opt,name=has_online,json=hasOnline,proto3,enum=parser.Select" json:"has_online,omitempty"`
	HasInn             Select          `protobuf:"varint,7,opt,name=has_inn,json=hasInn,proto3,enum=parser.Select" json:"has_inn,omitempty"`
	HasKpp             Select          `protobuf:"varint,8,opt,name=has_kpp,json=hasKpp,proto3,enum=parser.Select" json:"has_kpp,omitempty"`
	HasOgrn            Select          `protobuf:"varint,9,opt,name=has_ogrn,json=hasOgrn,proto3,enum=parser.Select" json:"has_ogrn,omitempty"`
	HasAppStore        Select          `protobuf:"varint,10,opt,name=has_app_store,json=hasAppStore,proto3,enum=parser.Select" json:"has_app_store,omitempty"`
	HasGooglePlay      Select          `protobuf:"varint,11,opt,name=has_google_play,json=hasGooglePlay,proto3,enum=parser.Select" json:"has_google_play,omitempty"`
	HasVk              Select          `protobuf:"varint,12,opt,name=has_vk,json=hasVk,proto3,enum=parser.Select" json:"has_vk,omitempty"`
	VkMembersCount     *VkMembersCount `protobuf:"bytes,13,opt,name=vk_members_count,json=vkMembersCount,proto3" json:"vk_members_count,omitempty"`
	HasInstagram       Select          `protobuf:"varint,14,opt,name=has_instagram,json=hasInstagram,proto3,enum=parser.Select" json:"has_instagram,omitempty"`
	HasTwitter         Select          `protobuf:"varint,15,opt,name=has_twitter,json=hasTwitter,proto3,enum=parser.Select" json:"has_twitter,omitempty"`
	HasYoutube         Select          `protobuf:"varint,16,opt,name=has_youtube,json=hasYoutube,proto3,enum=parser.Select" json:"has_youtube,omitempty"`
	HasFacebook        Select          `protobuf:"varint,17,opt,name=has_facebook,json=hasFacebook,proto3,enum=parser.Select" json:"has_facebook,omitempty"`
	TechnologyIds      []string        `protobuf:"bytes,18,rep,name=technology_ids,json=technologyIds,proto3" json:"technology_ids,omitempty"`
	TechnologyFindRule FindRule        `protobuf:"varint,19,opt,name=technology_find_rule,json=technologyFindRule,proto3,enum=parser.FindRule" json:"technology_find_rule,omitempty"`
	CompanyIds         []string        `protobuf:"bytes,20,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
	DnsIds             []string        `protobuf:"bytes,21,rep,name=dns_ids,json=dnsIds,proto3" json:"dns_ids,omitempty"`
}

func (x *GetV2Request) Reset() {
	*x = GetV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetV2Request) ProtoMessage() {}

func (x *GetV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetV2Request.ProtoReflect.Descriptor instead.
func (*GetV2Request) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{20}
}

func (x *GetV2Request) GetOpts() *opts.Page {
	if x != nil {
		return x.Opts
	}
	return nil
}

func (x *GetV2Request) GetCityIds() []string {
	if x != nil {
		return x.CityIds
	}
	return nil
}

func (x *GetV2Request) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *GetV2Request) GetHasEmail() Select {
	if x != nil {
		return x.HasEmail
	}
	return Select_ANY
}

func (x *GetV2Request) GetHasPhone() Select {
	if x != nil {
		return x.HasPhone
	}
	return Select_ANY
}

func (x *GetV2Request) GetHasOnline() Select {
	if x != nil {
		return x.HasOnline
	}
	return Select_ANY
}

func (x *GetV2Request) GetHasInn() Select {
	if x != nil {
		return x.HasInn
	}
	return Select_ANY
}

func (x *GetV2Request) GetHasKpp() Select {
	if x != nil {
		return x.HasKpp
	}
	return Select_ANY
}

func (x *GetV2Request) GetHasOgrn() Select {
	if x != nil {
		return x.HasOgrn
	}
	return Select_ANY
}

func (x *GetV2Request) GetHasAppStore() Select {
	if x != nil {
		return x.HasAppStore
	}
	return Select_ANY
}

func (x *GetV2Request) GetHasGooglePlay() Select {
	if x != nil {
		return x.HasGooglePlay
	}
	return Select_ANY
}

func (x *GetV2Request) GetHasVk() Select {
	if x != nil {
		return x.HasVk
	}
	return Select_ANY
}

func (x *GetV2Request) GetVkMembersCount() *VkMembersCount {
	if x != nil {
		return x.VkMembersCount
	}
	return nil
}

func (x *GetV2Request) GetHasInstagram() Select {
	if x != nil {
		return x.HasInstagram
	}
	return Select_ANY
}

func (x *GetV2Request) GetHasTwitter() Select {
	if x != nil {
		return x.HasTwitter
	}
	return Select_ANY
}

func (x *GetV2Request) GetHasYoutube() Select {
	if x != nil {
		return x.HasYoutube
	}
	return Select_ANY
}

func (x *GetV2Request) GetHasFacebook() Select {
	if x != nil {
		return x.HasFacebook
	}
	return Select_ANY
}

func (x *GetV2Request) GetTechnologyIds() []string {
	if x != nil {
		return x.TechnologyIds
	}
	return nil
}

func (x *GetV2Request) GetTechnologyFindRule() FindRule {
	if x != nil {
		return x.TechnologyFindRule
	}
	return FindRule_ONE_OF
}

func (x *GetV2Request) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

func (x *GetV2Request) GetDnsIds() []string {
	if x != nil {
		return x.DnsIds
	}
	return nil
}

type MyCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Category  *CategoryItem `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Url       string        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Slug      string        `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Title     string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Email     string        `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Phone     float64       `protobuf:"fixed64,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Avatar    string        `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
	City      *CityItem     `protobuf:"bytes,9,opt,name=city,proto3" json:"city,omitempty"`
	App       *App          `protobuf:"bytes,10,opt,name=app,proto3" json:"app,omitempty"`
	Social    *ShortSocial  `protobuf:"bytes,11,opt,name=social,proto3" json:"social,omitempty"`
	UpdatedAt string        `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// company has owner
	Verified        bool   `protobuf:"varint,13,opt,name=verified,proto3" json:"verified,omitempty"`
	Premium         bool   `protobuf:"varint,14,opt,name=premium,proto3" json:"premium,omitempty"`
	PremiumDeadline string `protobuf:"bytes,15,opt,name=premium_deadline,json=premiumDeadline,proto3" json:"premium_deadline,omitempty"`
}

func (x *MyCompany) Reset() {
	*x = MyCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyCompany) ProtoMessage() {}

func (x *MyCompany) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyCompany.ProtoReflect.Descriptor instead.
func (*MyCompany) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{21}
}

func (x *MyCompany) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MyCompany) GetCategory() *CategoryItem {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *MyCompany) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MyCompany) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *MyCompany) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MyCompany) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MyCompany) GetPhone() float64 {
	if x != nil {
		return x.Phone
	}
	return 0
}

func (x *MyCompany) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *MyCompany) GetCity() *CityItem {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *MyCompany) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *MyCompany) GetSocial() *ShortSocial {
	if x != nil {
		return x.Social
	}
	return nil
}

func (x *MyCompany) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *MyCompany) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *MyCompany) GetPremium() bool {
	if x != nil {
		return x.Premium
	}
	return false
}

func (x *MyCompany) GetPremiumDeadline() string {
	if x != nil {
		return x.PremiumDeadline
	}
	return ""
}

type GetMyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies []*MyCompany `protobuf:"bytes,1,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (x *GetMyResponse) Reset() {
	*x = GetMyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyResponse) ProtoMessage() {}

func (x *GetMyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyResponse.ProtoReflect.Descriptor instead.
func (*GetMyResponse) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{22}
}

func (x *GetMyResponse) GetCompanies() []*MyCompany {
	if x != nil {
		return x.Companies
	}
	return nil
}

type ShortCompanies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies []*ShortCompany `protobuf:"bytes,1,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (x *ShortCompanies) Reset() {
	*x = ShortCompanies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortCompanies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortCompanies) ProtoMessage() {}

func (x *ShortCompanies) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortCompanies.ProtoReflect.Descriptor instead.
func (*ShortCompanies) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{23}
}

func (x *ShortCompanies) GetCompanies() []*ShortCompany {
	if x != nil {
		return x.Companies
	}
	return nil
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies []*FullCompany `protobuf:"bytes,1,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{24}
}

func (x *GetResponse) GetCompanies() []*FullCompany {
	if x != nil {
		return x.Companies
	}
	return nil
}

type GetBySlugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *GetBySlugRequest) Reset() {
	*x = GetBySlugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBySlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBySlugRequest) ProtoMessage() {}

func (x *GetBySlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBySlugRequest.ProtoReflect.Descriptor instead.
func (*GetBySlugRequest) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{25}
}

func (x *GetBySlugRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type FullCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Category    *CategoryItem `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Url         string        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Slug        string        `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Title       string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Email       string        `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Description string        `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Online      bool          `protobuf:"varint,8,opt,name=online,proto3" json:"online,omitempty"`
	Phone       float64       `protobuf:"fixed64,9,opt,name=phone,proto3" json:"phone,omitempty"`
	Inn         float64       `protobuf:"fixed64,10,opt,name=inn,proto3" json:"inn,omitempty"`
	Kpp         float64       `protobuf:"fixed64,11,opt,name=kpp,proto3" json:"kpp,omitempty"`
	Ogrn        float64       `protobuf:"fixed64,12,opt,name=ogrn,proto3" json:"ogrn,omitempty"`
	Domain      *Domain       `protobuf:"bytes,13,opt,name=domain,proto3" json:"domain,omitempty"`
	Avatar      string        `protobuf:"bytes,14,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Location    *FullLocation `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty"`
	App         *App          `protobuf:"bytes,16,opt,name=app,proto3" json:"app,omitempty"`
	Social      *Social       `protobuf:"bytes,17,opt,name=social,proto3" json:"social,omitempty"`
	People      []*People     `protobuf:"bytes,18,rep,name=people,proto3" json:"people,omitempty"`
	UpdatedAt   string        `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *FullCompany) Reset() {
	*x = FullCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullCompany) ProtoMessage() {}

func (x *FullCompany) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullCompany.ProtoReflect.Descriptor instead.
func (*FullCompany) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{26}
}

func (x *FullCompany) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FullCompany) GetCategory() *CategoryItem {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *FullCompany) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FullCompany) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *FullCompany) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FullCompany) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FullCompany) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FullCompany) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *FullCompany) GetPhone() float64 {
	if x != nil {
		return x.Phone
	}
	return 0
}

func (x *FullCompany) GetInn() float64 {
	if x != nil {
		return x.Inn
	}
	return 0
}

func (x *FullCompany) GetKpp() float64 {
	if x != nil {
		return x.Kpp
	}
	return 0
}

func (x *FullCompany) GetOgrn() float64 {
	if x != nil {
		return x.Ogrn
	}
	return 0
}

func (x *FullCompany) GetDomain() *Domain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *FullCompany) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *FullCompany) GetLocation() *FullLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FullCompany) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *FullCompany) GetSocial() *Social {
	if x != nil {
		return x.Social
	}
	return nil
}

func (x *FullCompany) GetPeople() []*People {
	if x != nil {
		return x.People
	}
	return nil
}

func (x *FullCompany) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type TechItemInverted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Slug    string `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *TechItemInverted) Reset() {
	*x = TechItemInverted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechItemInverted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechItemInverted) ProtoMessage() {}

func (x *TechItemInverted) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechItemInverted.ProtoReflect.Descriptor instead.
func (*TechItemInverted) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{27}
}

func (x *TechItemInverted) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TechItemInverted) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TechItemInverted) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TechItemInverted) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type TechCategoryInverted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Technologies []*TechItemInverted `protobuf:"bytes,3,rep,name=technologies,proto3" json:"technologies,omitempty"`
}

func (x *TechCategoryInverted) Reset() {
	*x = TechCategoryInverted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechCategoryInverted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechCategoryInverted) ProtoMessage() {}

func (x *TechCategoryInverted) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechCategoryInverted.ProtoReflect.Descriptor instead.
func (*TechCategoryInverted) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{28}
}

func (x *TechCategoryInverted) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TechCategoryInverted) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TechCategoryInverted) GetTechnologies() []*TechItemInverted {
	if x != nil {
		return x.Technologies
	}
	return nil
}

type ShortCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Category  *CategoryItem `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Url       string        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Slug      string        `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Title     string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Email     string        `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Phone     float64       `protobuf:"fixed64,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Avatar    string        `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
	City      *CityItem     `protobuf:"bytes,9,opt,name=city,proto3" json:"city,omitempty"`
	App       *App          `protobuf:"bytes,10,opt,name=app,proto3" json:"app,omitempty"`
	Social    *ShortSocial  `protobuf:"bytes,11,opt,name=social,proto3" json:"social,omitempty"`
	UpdatedAt string        `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// company has owner
	Verified bool `protobuf:"varint,13,opt,name=verified,proto3" json:"verified,omitempty"`
	Premium  bool `protobuf:"varint,14,opt,name=premium,proto3" json:"premium,omitempty"`
}

func (x *ShortCompany) Reset() {
	*x = ShortCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortCompany) ProtoMessage() {}

func (x *ShortCompany) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortCompany.ProtoReflect.Descriptor instead.
func (*ShortCompany) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{29}
}

func (x *ShortCompany) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortCompany) GetCategory() *CategoryItem {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ShortCompany) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ShortCompany) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ShortCompany) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ShortCompany) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ShortCompany) GetPhone() float64 {
	if x != nil {
		return x.Phone
	}
	return 0
}

func (x *ShortCompany) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ShortCompany) GetCity() *CityItem {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *ShortCompany) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ShortCompany) GetSocial() *ShortSocial {
	if x != nil {
		return x.Social
	}
	return nil
}

func (x *ShortCompany) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ShortCompany) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *ShortCompany) GetPremium() bool {
	if x != nil {
		return x.Premium
	}
	return false
}

type GetBySlugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullCompany          *FullCompany            `protobuf:"bytes,1,opt,name=full_company,json=fullCompany,proto3" json:"full_company,omitempty"`
	TechnologyCategories []*TechCategoryInverted `protobuf:"bytes,2,rep,name=technology_categories,json=technologyCategories,proto3" json:"technology_categories,omitempty"`
	// milliseconds
	PageSpeed uint32          `protobuf:"varint,3,opt,name=page_speed,json=pageSpeed,proto3" json:"page_speed,omitempty"`
	Related   []*ShortCompany `protobuf:"bytes,4,rep,name=related,proto3" json:"related,omitempty"`
	Posts     []*PostItem     `protobuf:"bytes,5,rep,name=posts,proto3" json:"posts,omitempty"`
	// company has owner
	Verified bool          `protobuf:"varint,6,opt,name=verified,proto3" json:"verified,omitempty"`
	Premium  bool          `protobuf:"varint,7,opt,name=premium,proto3" json:"premium,omitempty"`
	Dns      []*DnsItem    `protobuf:"bytes,8,rep,name=dns,proto3" json:"dns,omitempty"`
	Reviews  []*ReviewItem `protobuf:"bytes,9,rep,name=reviews,proto3" json:"reviews,omitempty"`
}

func (x *GetBySlugResponse) Reset() {
	*x = GetBySlugResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBySlugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBySlugResponse) ProtoMessage() {}

func (x *GetBySlugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBySlugResponse.ProtoReflect.Descriptor instead.
func (*GetBySlugResponse) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{30}
}

func (x *GetBySlugResponse) GetFullCompany() *FullCompany {
	if x != nil {
		return x.FullCompany
	}
	return nil
}

func (x *GetBySlugResponse) GetTechnologyCategories() []*TechCategoryInverted {
	if x != nil {
		return x.TechnologyCategories
	}
	return nil
}

func (x *GetBySlugResponse) GetPageSpeed() uint32 {
	if x != nil {
		return x.PageSpeed
	}
	return 0
}

func (x *GetBySlugResponse) GetRelated() []*ShortCompany {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *GetBySlugResponse) GetPosts() []*PostItem {
	if x != nil {
		return x.Posts
	}
	return nil
}

func (x *GetBySlugResponse) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *GetBySlugResponse) GetPremium() bool {
	if x != nil {
		return x.Premium
	}
	return false
}

func (x *GetBySlugResponse) GetDns() []*DnsItem {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *GetBySlugResponse) GetReviews() []*ReviewItem {
	if x != nil {
		return x.Reviews
	}
	return nil
}

type People struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VkId        float64 `protobuf:"fixed64,1,opt,name=vk_id,json=vkId,proto3" json:"vk_id,omitempty"`
	FirstName   string  `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName    string  `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	VkIsClosed  bool    `protobuf:"varint,4,opt,name=vk_is_closed,json=vkIsClosed,proto3" json:"vk_is_closed,omitempty"`
	Sex         Sex     `protobuf:"varint,5,opt,name=sex,proto3,enum=parser.Sex" json:"sex,omitempty"`
	Photo_200   string  `protobuf:"bytes,6,opt,name=photo_200,json=photo200,proto3" json:"photo_200,omitempty"`
	Phone       float64 `protobuf:"fixed64,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Email       string  `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	Description string  `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *People) Reset() {
	*x = People{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *People) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*People) ProtoMessage() {}

func (x *People) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use People.ProtoReflect.Descriptor instead.
func (*People) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{31}
}

func (x *People) GetVkId() float64 {
	if x != nil {
		return x.VkId
	}
	return 0
}

func (x *People) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *People) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *People) GetVkIsClosed() bool {
	if x != nil {
		return x.VkIsClosed
	}
	return false
}

func (x *People) GetSex() Sex {
	if x != nil {
		return x.Sex
	}
	return Sex_NONE
}

func (x *People) GetPhoto_200() string {
	if x != nil {
		return x.Photo_200
	}
	return ""
}

func (x *People) GetPhone() float64 {
	if x != nil {
		return x.Phone
	}
	return 0
}

func (x *People) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *People) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Social struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vk        *Vk      `protobuf:"bytes,1,opt,name=vk,proto3" json:"vk,omitempty"`
	Instagram *UrlItem `protobuf:"bytes,2,opt,name=instagram,proto3" json:"instagram,omitempty"`
	Twitter   *UrlItem `protobuf:"bytes,3,opt,name=twitter,proto3" json:"twitter,omitempty"`
	Youtube   *UrlItem `protobuf:"bytes,4,opt,name=youtube,proto3" json:"youtube,omitempty"`
	Facebook  *UrlItem `protobuf:"bytes,5,opt,name=facebook,proto3" json:"facebook,omitempty"`
}

func (x *Social) Reset() {
	*x = Social{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Social) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Social) ProtoMessage() {}

func (x *Social) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Social.ProtoReflect.Descriptor instead.
func (*Social) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{32}
}

func (x *Social) GetVk() *Vk {
	if x != nil {
		return x.Vk
	}
	return nil
}

func (x *Social) GetInstagram() *UrlItem {
	if x != nil {
		return x.Instagram
	}
	return nil
}

func (x *Social) GetTwitter() *UrlItem {
	if x != nil {
		return x.Twitter
	}
	return nil
}

func (x *Social) GetYoutube() *UrlItem {
	if x != nil {
		return x.Youtube
	}
	return nil
}

func (x *Social) GetFacebook() *UrlItem {
	if x != nil {
		return x.Facebook
	}
	return nil
}

type ShortSocial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vk        *ShortVk `protobuf:"bytes,1,opt,name=vk,proto3" json:"vk,omitempty"`
	Instagram *UrlItem `protobuf:"bytes,2,opt,name=instagram,proto3" json:"instagram,omitempty"`
	Twitter   *UrlItem `protobuf:"bytes,3,opt,name=twitter,proto3" json:"twitter,omitempty"`
	Youtube   *UrlItem `protobuf:"bytes,4,opt,name=youtube,proto3" json:"youtube,omitempty"`
	Facebook  *UrlItem `protobuf:"bytes,5,opt,name=facebook,proto3" json:"facebook,omitempty"`
}

func (x *ShortSocial) Reset() {
	*x = ShortSocial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortSocial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortSocial) ProtoMessage() {}

func (x *ShortSocial) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortSocial.ProtoReflect.Descriptor instead.
func (*ShortSocial) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{33}
}

func (x *ShortSocial) GetVk() *ShortVk {
	if x != nil {
		return x.Vk
	}
	return nil
}

func (x *ShortSocial) GetInstagram() *UrlItem {
	if x != nil {
		return x.Instagram
	}
	return nil
}

func (x *ShortSocial) GetTwitter() *UrlItem {
	if x != nil {
		return x.Twitter
	}
	return nil
}

func (x *ShortSocial) GetYoutube() *UrlItem {
	if x != nil {
		return x.Youtube
	}
	return nil
}

func (x *ShortSocial) GetFacebook() *UrlItem {
	if x != nil {
		return x.Facebook
	}
	return nil
}

type ShortVk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenName   string  `protobuf:"bytes,1,opt,name=screen_name,json=screenName,proto3" json:"screen_name,omitempty"`
	MembersCount float64 `protobuf:"fixed64,2,opt,name=members_count,json=membersCount,proto3" json:"members_count,omitempty"`
	GroupId      float64 `protobuf:"fixed64,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *ShortVk) Reset() {
	*x = ShortVk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortVk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortVk) ProtoMessage() {}

func (x *ShortVk) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortVk.ProtoReflect.Descriptor instead.
func (*ShortVk) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{34}
}

func (x *ShortVk) GetScreenName() string {
	if x != nil {
		return x.ScreenName
	}
	return ""
}

func (x *ShortVk) GetMembersCount() float64 {
	if x != nil {
		return x.MembersCount
	}
	return 0
}

func (x *ShortVk) GetGroupId() float64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type Vk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId      float64  `protobuf:"fixed64,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ScreenName   string   `protobuf:"bytes,3,opt,name=screen_name,json=screenName,proto3" json:"screen_name,omitempty"`
	IsClosed     IsClosed `protobuf:"varint,4,opt,name=is_closed,json=isClosed,proto3,enum=parser.IsClosed" json:"is_closed,omitempty"`
	Description  string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	MembersCount float64  `protobuf:"fixed64,6,opt,name=members_count,json=membersCount,proto3" json:"members_count,omitempty"`
	Photo_200    string   `protobuf:"bytes,7,opt,name=photo_200,json=photo200,proto3" json:"photo_200,omitempty"`
}

func (x *Vk) Reset() {
	*x = Vk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vk) ProtoMessage() {}

func (x *Vk) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vk.ProtoReflect.Descriptor instead.
func (*Vk) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{35}
}

func (x *Vk) GetGroupId() float64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Vk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vk) GetScreenName() string {
	if x != nil {
		return x.ScreenName
	}
	return ""
}

func (x *Vk) GetIsClosed() IsClosed {
	if x != nil {
		return x.IsClosed
	}
	return IsClosed_OPEN
}

func (x *Vk) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Vk) GetMembersCount() float64 {
	if x != nil {
		return x.MembersCount
	}
	return 0
}

func (x *Vk) GetPhoto_200() string {
	if x != nil {
		return x.Photo_200
	}
	return ""
}

type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppStore   *UrlItem `protobuf:"bytes,1,opt,name=app_store,json=appStore,proto3" json:"app_store,omitempty"`
	GooglePlay *UrlItem `protobuf:"bytes,2,opt,name=google_play,json=googlePlay,proto3" json:"google_play,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{36}
}

func (x *App) GetAppStore() *UrlItem {
	if x != nil {
		return x.AppStore
	}
	return nil
}

func (x *App) GetGooglePlay() *UrlItem {
	if x != nil {
		return x.GooglePlay
	}
	return nil
}

type UrlItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UrlItem) Reset() {
	*x = UrlItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlItem) ProtoMessage() {}

func (x *UrlItem) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlItem.ProtoReflect.Descriptor instead.
func (*UrlItem) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{37}
}

func (x *UrlItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Registrar        string `protobuf:"bytes,2,opt,name=registrar,proto3" json:"registrar,omitempty"`
	RegistrationDate string `protobuf:"bytes,3,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date,omitempty"`
}

func (x *Domain) Reset() {
	*x = Domain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domain) ProtoMessage() {}

func (x *Domain) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domain.ProtoReflect.Descriptor instead.
func (*Domain) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{38}
}

func (x *Domain) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Domain) GetRegistrar() string {
	if x != nil {
		return x.Registrar
	}
	return ""
}

func (x *Domain) GetRegistrationDate() string {
	if x != nil {
		return x.RegistrationDate
	}
	return ""
}

type FullLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City         *CityItem `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	Address      string    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	AddressTitle string    `protobuf:"bytes,3,opt,name=address_title,json=addressTitle,proto3" json:"address_title,omitempty"`
}

func (x *FullLocation) Reset() {
	*x = FullLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_company_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullLocation) ProtoMessage() {}

func (x *FullLocation) ProtoReflect() protoreflect.Message {
	mi := &file_parser_company_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullLocation.ProtoReflect.Descriptor instead.
func (*FullLocation) Descriptor() ([]byte, []int) {
	return file_parser_company_proto_rawDescGZIP(), []int{39}
}

func (x *FullLocation) GetCity() *CityItem {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *FullLocation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FullLocation) GetAddressTitle() string {
	if x != nil {
		return x.AddressTitle
	}
	return ""
}

var File_parser_company_proto protoreflect.FileDescriptor

var file_parser_company_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2f, 0x64, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x75, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x6c, 0x75, 0x67, 0x73, 0x22, 0x55, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x28,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf6, 0x05, 0x0a, 0x0d, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6e, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x69, 0x6e, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x70, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6b,
	0x70, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x67, 0x72, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x6f, 0x67, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x41,
	0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52,
	0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x51, 0x0a, 0x15, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x63, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x52, 0x14, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x21,
	0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x6e, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x64, 0x6e,
	0x73, 0x22, 0x5e, 0x0a, 0x1a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x9a, 0x09, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0b,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x66,
	0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0b,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x44, 0x0a,
	0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x03, 0x69, 0x6e, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x69, 0x6e, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x70, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x6b, 0x70, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6f, 0x67, 0x72, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6f, 0x67, 0x72, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x33,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x04, 0x6f,
	0x70, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x42,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x6f, 0x70, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69,
	0x74, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x53, 0x6c, 0x75, 0x67, 0x22, 0x42, 0x0a, 0x1c, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x73,
	0x33, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x53, 0x33, 0x55, 0x72, 0x6c, 0x22, 0x3c, 0x0a, 0x1d, 0x49, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xf7, 0x06, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x08, 0x68, 0x61, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x2b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x68, 0x61, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x0a,
	0x0a, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x07,
	0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x68,
	0x61, 0x73, 0x49, 0x6e, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x6b, 0x70, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4b, 0x70, 0x70, 0x12, 0x29,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x67, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x68, 0x61, 0x73, 0x4f, 0x67, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x68, 0x61, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x0b, 0x68, 0x61, 0x73, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a,
	0x0f, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x05, 0x68, 0x61, 0x73, 0x56, 0x6b, 0x12, 0x40, 0x0a, 0x10,
	0x76, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x56, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e,
	0x76, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x54, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x62, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x59, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x61, 0x63,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x68, 0x61, 0x73,
	0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x42, 0x0a, 0x14, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x66, 0x69,
	0x6e, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x12, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6e, 0x73, 0x49, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x09, 0x35, 0x20,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
	0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x0e, 0x56, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x9b, 0x07, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x4f, 0x70,
	0x74, 0x73, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x08, 0x68, 0x61, 0x73, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x08, 0x68, 0x61, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x2d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x06, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f,
	0x6b, 0x70, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4b, 0x70,
	0x70, 0x12, 0x29, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x67, 0x72, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4f, 0x67, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x0d,
	0x68, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x36, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x5f,
	0x76, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x05, 0x68, 0x61, 0x73, 0x56, 0x6b, 0x12,
	0x40, 0x0a, 0x10, 0x76, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x56, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x0e, 0x76, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f,
	0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0b,
	0x68, 0x61, 0x73, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x14, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x12, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x46,
	0x69, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x22, 0xb6, 0x07, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x08, 0x68, 0x61, 0x73, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x08, 0x68, 0x61, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x2d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x06, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f,
	0x6b, 0x70, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4b, 0x70,
	0x70, 0x12, 0x29, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x67, 0x72, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4f, 0x67, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x0d,
	0x68, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x36, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x5f,
	0x76, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x05, 0x68, 0x61, 0x73, 0x56, 0x6b, 0x12,
	0x40, 0x0a, 0x10, 0x76, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x56, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x0e, 0x76, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f,
	0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0b,
	0x68, 0x61, 0x73, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49,
	0x64, 0x73, 0x12, 0x42, 0x0a, 0x14, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x5f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x12, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6e, 0x73, 0x49, 0x64, 0x73,
	0x22, 0xbf, 0x03, 0x0a, 0x09, 0x4d, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x24, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70,
	0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x4d, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x92, 0x41, 0x07, 0xd2, 0x01, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x22, 0xa9, 0x04, 0x0a, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x69, 0x6e, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x70, 0x70, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6b, 0x70, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x67, 0x72, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x67, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x30, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x26, 0x0a,
	0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x06, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x50,
	0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x64, 0x0a, 0x10,
	0x54, 0x65, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x22, 0x78, 0x0a, 0x14, 0x54, 0x65, 0x63, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x0c,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x22, 0x97, 0x03, 0x0a,
	0x0c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x24, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x52,
	0x03, 0x61, 0x70, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22, 0x9c, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0c,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x51, 0x0a, 0x15, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x63,
	0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x52, 0x14, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x6e, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x06, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x76, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x76, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x6b, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x76, 0x6b, 0x49, 0x73, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x78, 0x52, 0x03, 0x73,
	0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x32, 0x30, 0x30, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x32, 0x30, 0x30, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x01,
	0x0a, 0x06, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x02, 0x76, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x6b,
	0x52, 0x02, 0x76, 0x6b, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x72, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x72,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x07, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x72, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x07, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x61, 0x63,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x72, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x66, 0x61,
	0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0xe0, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x02, 0x76, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x56, 0x6b, 0x52, 0x02, 0x76, 0x6b, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x72, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x72, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x07, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x72, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x12, 0x2b, 0x0a, 0x08,
	0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x72, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0x6a, 0x0a, 0x07, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x56, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x02, 0x56, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x32, 0x30, 0x30, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x32, 0x30, 0x30, 0x22,
	0x65, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x72, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x61, 0x70, 0x70, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x72, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x22, 0x1b, 0x0a, 0x07, 0x55, 0x72, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x6d, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x73, 0x0a, 0x0c, 0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x2a, 0x22, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02, 0x2a, 0x1f, 0x0a, 0x08, 0x46,
	0x69, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x45, 0x5f, 0x4f,
	0x46, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0x25, 0x0a, 0x03,
	0x53, 0x65, 0x78, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c,
	0x45, 0x10, 0x02, 0x2a, 0x2c, 0x0a, 0x08, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x32, 0xf2, 0x0c, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x61, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x56, 0x32, 0x12, 0x18, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67,
	0x12, 0x59, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x18, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x4e, 0x0a, 0x05, 0x47,
	0x65, 0x74, 0x56, 0x32, 0x12, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2f, 0x67, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f,
	0x67, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x5f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x73, 0x12, 0x19, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x73,
	0x12, 0x69, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x67, 0x65,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x05, 0x47,
	0x65, 0x74, 0x4d, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x12, 0x50, 0x0a, 0x04,
	0x45, 0x64, 0x69, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x32, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x35,
	0x0a, 0x05, 0x47, 0x65, 0x74, 0x42, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79,
	0x42, 0x79, 0x12, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x79, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x55,
	0x6e, 0x73, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x13, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x22, 0x2e, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x56, 0x32, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x12, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6e, 0x71, 0x71, 0x2f, 0x73, 0x63, 0x72, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_parser_company_proto_rawDescOnce sync.Once
	file_parser_company_proto_rawDescData = file_parser_company_proto_rawDesc
)

func file_parser_company_proto_rawDescGZIP() []byte {
	file_parser_company_proto_rawDescOnce.Do(func() {
		file_parser_company_proto_rawDescData = protoimpl.X.CompressGZIP(file_parser_company_proto_rawDescData)
	})
	return file_parser_company_proto_rawDescData
}

var file_parser_company_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_parser_company_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_parser_company_proto_goTypes = []interface{}{
	(Select)(0),                           // 0: parser.Select
	(FindRule)(0),                         // 1: parser.FindRule
	(Sex)(0),                              // 2: parser.Sex
	(IsClosed)(0),                         // 3: parser.IsClosed
	(*SetHiddenRequest)(nil),              // 4: parser.SetHiddenRequest
	(*GetFullRequest)(nil),                // 5: parser.GetFullRequest
	(*GetCountResponse)(nil),              // 6: parser.GetCountResponse
	(*FullCompanyV2)(nil),                 // 7: parser.FullCompanyV2
	(*RenewCompanyPremiumRequest)(nil),    // 8: parser.RenewCompanyPremiumRequest
	(*EditRequest)(nil),                   // 9: parser.EditRequest
	(*GetMyRequest)(nil),                  // 10: parser.GetMyRequest
	(*GetByRequest)(nil),                  // 11: parser.GetByRequest
	(*GetManyByRequest)(nil),              // 12: parser.GetManyByRequest
	(*GetTotalCountResponse)(nil),         // 13: parser.GetTotalCountResponse
	(*GetBySlugsRequest)(nil),             // 14: parser.GetBySlugsRequest
	(*IsCompanyAvatarExistsRequest)(nil),  // 15: parser.IsCompanyAvatarExistsRequest
	(*IsCompanyAvatarExistsResponse)(nil), // 16: parser.IsCompanyAvatarExistsResponse
	(*ReindexRequest)(nil),                // 17: parser.ReindexRequest
	(*GetListRequest)(nil),                // 18: parser.GetListRequest
	(*GetListResponse)(nil),               // 19: parser.GetListResponse
	(*GetRelatedRequest)(nil),             // 20: parser.GetRelatedRequest
	(*GetRelatedResponse)(nil),            // 21: parser.GetRelatedResponse
	(*VkMembersCount)(nil),                // 22: parser.VkMembersCount
	(*GetRequest)(nil),                    // 23: parser.GetRequest
	(*GetV2Request)(nil),                  // 24: parser.GetV2Request
	(*MyCompany)(nil),                     // 25: parser.MyCompany
	(*GetMyResponse)(nil),                 // 26: parser.GetMyResponse
	(*ShortCompanies)(nil),                // 27: parser.ShortCompanies
	(*GetResponse)(nil),                   // 28: parser.GetResponse
	(*GetBySlugRequest)(nil),              // 29: parser.GetBySlugRequest
	(*FullCompany)(nil),                   // 30: parser.FullCompany
	(*TechItemInverted)(nil),              // 31: parser.TechItemInverted
	(*TechCategoryInverted)(nil),          // 32: parser.TechCategoryInverted
	(*ShortCompany)(nil),                  // 33: parser.ShortCompany
	(*GetBySlugResponse)(nil),             // 34: parser.GetBySlugResponse
	(*People)(nil),                        // 35: parser.People
	(*Social)(nil),                        // 36: parser.Social
	(*ShortSocial)(nil),                   // 37: parser.ShortSocial
	(*ShortVk)(nil),                       // 38: parser.ShortVk
	(*Vk)(nil),                            // 39: parser.Vk
	(*App)(nil),                           // 40: parser.App
	(*UrlItem)(nil),                       // 41: parser.UrlItem
	(*Domain)(nil),                        // 42: parser.Domain
	(*FullLocation)(nil),                  // 43: parser.FullLocation
	(*CategoryItem)(nil),                  // 44: parser.CategoryItem
	(*DnsItem)(nil),                       // 45: parser.DnsItem
	(*wrapperspb.StringValue)(nil),        // 46: google.protobuf.StringValue
	(*wrapperspb.DoubleValue)(nil),        // 47: google.protobuf.DoubleValue
	(*opts.SkipLimit)(nil),                // 48: opts.SkipLimit
	(*opts.Page)(nil),                     // 49: opts.Page
	(*timestamppb.Timestamp)(nil),         // 50: google.protobuf.Timestamp
	(*opts.Opts)(nil),                     // 51: opts.Opts
	(*CityItem)(nil),                      // 52: parser.CityItem
	(*PostItem)(nil),                      // 53: parser.PostItem
	(*ReviewItem)(nil),                    // 54: parser.ReviewItem
	(*emptypb.Empty)(nil),                 // 55: google.protobuf.Empty
}
var file_parser_company_proto_depIdxs = []int32{
	24,  // 0: parser.GetFullRequest.query:type_name -> parser.GetV2Request
	44,  // 1: parser.FullCompanyV2.category:type_name -> parser.CategoryItem
	42,  // 2: parser.FullCompanyV2.domain:type_name -> parser.Domain
	43,  // 3: parser.FullCompanyV2.location:type_name -> parser.FullLocation
	40,  // 4: parser.FullCompanyV2.app:type_name -> parser.App
	36,  // 5: parser.FullCompanyV2.social:type_name -> parser.Social
	35,  // 6: parser.FullCompanyV2.people:type_name -> parser.People
	32,  // 7: parser.FullCompanyV2.technology_categories:type_name -> parser.TechCategoryInverted
	45,  // 8: parser.FullCompanyV2.dns:type_name -> parser.DnsItem
	46,  // 9: parser.EditRequest.title:type_name -> google.protobuf.StringValue
	46,  // 10: parser.EditRequest.description:type_name -> google.protobuf.StringValue
	46,  // 11: parser.EditRequest.email:type_name -> google.protobuf.StringValue
	47,  // 12: parser.EditRequest.phone:type_name -> google.protobuf.DoubleValue
	46,  // 13: parser.EditRequest.address_street:type_name -> google.protobuf.StringValue
	46,  // 14: parser.EditRequest.address_house:type_name -> google.protobuf.StringValue
	46,  // 15: parser.EditRequest.vk_url:type_name -> google.protobuf.StringValue
	46,  // 16: parser.EditRequest.instagram_url:type_name -> google.protobuf.StringValue
	46,  // 17: parser.EditRequest.youtube_url:type_name -> google.protobuf.StringValue
	46,  // 18: parser.EditRequest.facebook_url:type_name -> google.protobuf.StringValue
	46,  // 19: parser.EditRequest.twitter_url:type_name -> google.protobuf.StringValue
	46,  // 20: parser.EditRequest.app_store_url:type_name -> google.protobuf.StringValue
	46,  // 21: parser.EditRequest.google_play_url:type_name -> google.protobuf.StringValue
	47,  // 22: parser.EditRequest.inn:type_name -> google.protobuf.DoubleValue
	47,  // 23: parser.EditRequest.kpp:type_name -> google.protobuf.DoubleValue
	47,  // 24: parser.EditRequest.ogrn:type_name -> google.protobuf.DoubleValue
	46,  // 25: parser.EditRequest.avatar_base64:type_name -> google.protobuf.StringValue
	46,  // 26: parser.EditRequest.city_id:type_name -> google.protobuf.StringValue
	46,  // 27: parser.EditRequest.category_id:type_name -> google.protobuf.StringValue
	48,  // 28: parser.GetMyRequest.opts:type_name -> opts.SkipLimit
	49,  // 29: parser.GetBySlugsRequest.opts:type_name -> opts.Page
	50,  // 30: parser.ReindexRequest.registration_date:type_name -> google.protobuf.Timestamp
	0,   // 31: parser.GetListRequest.has_email:type_name -> parser.Select
	0,   // 32: parser.GetListRequest.has_phone:type_name -> parser.Select
	0,   // 33: parser.GetListRequest.has_online:type_name -> parser.Select
	0,   // 34: parser.GetListRequest.has_inn:type_name -> parser.Select
	0,   // 35: parser.GetListRequest.has_kpp:type_name -> parser.Select
	0,   // 36: parser.GetListRequest.has_ogrn:type_name -> parser.Select
	0,   // 37: parser.GetListRequest.has_app_store:type_name -> parser.Select
	0,   // 38: parser.GetListRequest.has_google_play:type_name -> parser.Select
	0,   // 39: parser.GetListRequest.has_vk:type_name -> parser.Select
	22,  // 40: parser.GetListRequest.vk_members_count:type_name -> parser.VkMembersCount
	0,   // 41: parser.GetListRequest.has_instagram:type_name -> parser.Select
	0,   // 42: parser.GetListRequest.has_twitter:type_name -> parser.Select
	0,   // 43: parser.GetListRequest.has_youtube:type_name -> parser.Select
	0,   // 44: parser.GetListRequest.has_facebook:type_name -> parser.Select
	1,   // 45: parser.GetListRequest.technology_find_rule:type_name -> parser.FindRule
	30,  // 46: parser.GetRelatedResponse.companies:type_name -> parser.FullCompany
	51,  // 47: parser.GetRequest.opts:type_name -> opts.Opts
	0,   // 48: parser.GetRequest.has_email:type_name -> parser.Select
	0,   // 49: parser.GetRequest.has_phone:type_name -> parser.Select
	0,   // 50: parser.GetRequest.has_online:type_name -> parser.Select
	0,   // 51: parser.GetRequest.has_inn:type_name -> parser.Select
	0,   // 52: parser.GetRequest.has_kpp:type_name -> parser.Select
	0,   // 53: parser.GetRequest.has_ogrn:type_name -> parser.Select
	0,   // 54: parser.GetRequest.has_app_store:type_name -> parser.Select
	0,   // 55: parser.GetRequest.has_google_play:type_name -> parser.Select
	0,   // 56: parser.GetRequest.has_vk:type_name -> parser.Select
	22,  // 57: parser.GetRequest.vk_members_count:type_name -> parser.VkMembersCount
	0,   // 58: parser.GetRequest.has_instagram:type_name -> parser.Select
	0,   // 59: parser.GetRequest.has_twitter:type_name -> parser.Select
	0,   // 60: parser.GetRequest.has_youtube:type_name -> parser.Select
	0,   // 61: parser.GetRequest.has_facebook:type_name -> parser.Select
	1,   // 62: parser.GetRequest.technology_find_rule:type_name -> parser.FindRule
	49,  // 63: parser.GetV2Request.opts:type_name -> opts.Page
	0,   // 64: parser.GetV2Request.has_email:type_name -> parser.Select
	0,   // 65: parser.GetV2Request.has_phone:type_name -> parser.Select
	0,   // 66: parser.GetV2Request.has_online:type_name -> parser.Select
	0,   // 67: parser.GetV2Request.has_inn:type_name -> parser.Select
	0,   // 68: parser.GetV2Request.has_kpp:type_name -> parser.Select
	0,   // 69: parser.GetV2Request.has_ogrn:type_name -> parser.Select
	0,   // 70: parser.GetV2Request.has_app_store:type_name -> parser.Select
	0,   // 71: parser.GetV2Request.has_google_play:type_name -> parser.Select
	0,   // 72: parser.GetV2Request.has_vk:type_name -> parser.Select
	22,  // 73: parser.GetV2Request.vk_members_count:type_name -> parser.VkMembersCount
	0,   // 74: parser.GetV2Request.has_instagram:type_name -> parser.Select
	0,   // 75: parser.GetV2Request.has_twitter:type_name -> parser.Select
	0,   // 76: parser.GetV2Request.has_youtube:type_name -> parser.Select
	0,   // 77: parser.GetV2Request.has_facebook:type_name -> parser.Select
	1,   // 78: parser.GetV2Request.technology_find_rule:type_name -> parser.FindRule
	44,  // 79: parser.MyCompany.category:type_name -> parser.CategoryItem
	52,  // 80: parser.MyCompany.city:type_name -> parser.CityItem
	40,  // 81: parser.MyCompany.app:type_name -> parser.App
	37,  // 82: parser.MyCompany.social:type_name -> parser.ShortSocial
	25,  // 83: parser.GetMyResponse.companies:type_name -> parser.MyCompany
	33,  // 84: parser.ShortCompanies.companies:type_name -> parser.ShortCompany
	30,  // 85: parser.GetResponse.companies:type_name -> parser.FullCompany
	44,  // 86: parser.FullCompany.category:type_name -> parser.CategoryItem
	42,  // 87: parser.FullCompany.domain:type_name -> parser.Domain
	43,  // 88: parser.FullCompany.location:type_name -> parser.FullLocation
	40,  // 89: parser.FullCompany.app:type_name -> parser.App
	36,  // 90: parser.FullCompany.social:type_name -> parser.Social
	35,  // 91: parser.FullCompany.people:type_name -> parser.People
	31,  // 92: parser.TechCategoryInverted.technologies:type_name -> parser.TechItemInverted
	44,  // 93: parser.ShortCompany.category:type_name -> parser.CategoryItem
	52,  // 94: parser.ShortCompany.city:type_name -> parser.CityItem
	40,  // 95: parser.ShortCompany.app:type_name -> parser.App
	37,  // 96: parser.ShortCompany.social:type_name -> parser.ShortSocial
	30,  // 97: parser.GetBySlugResponse.full_company:type_name -> parser.FullCompany
	32,  // 98: parser.GetBySlugResponse.technology_categories:type_name -> parser.TechCategoryInverted
	33,  // 99: parser.GetBySlugResponse.related:type_name -> parser.ShortCompany
	53,  // 100: parser.GetBySlugResponse.posts:type_name -> parser.PostItem
	45,  // 101: parser.GetBySlugResponse.dns:type_name -> parser.DnsItem
	54,  // 102: parser.GetBySlugResponse.reviews:type_name -> parser.ReviewItem
	2,   // 103: parser.People.sex:type_name -> parser.Sex
	39,  // 104: parser.Social.vk:type_name -> parser.Vk
	41,  // 105: parser.Social.instagram:type_name -> parser.UrlItem
	41,  // 106: parser.Social.twitter:type_name -> parser.UrlItem
	41,  // 107: parser.Social.youtube:type_name -> parser.UrlItem
	41,  // 108: parser.Social.facebook:type_name -> parser.UrlItem
	38,  // 109: parser.ShortSocial.vk:type_name -> parser.ShortVk
	41,  // 110: parser.ShortSocial.instagram:type_name -> parser.UrlItem
	41,  // 111: parser.ShortSocial.twitter:type_name -> parser.UrlItem
	41,  // 112: parser.ShortSocial.youtube:type_name -> parser.UrlItem
	41,  // 113: parser.ShortSocial.facebook:type_name -> parser.UrlItem
	3,   // 114: parser.Vk.is_closed:type_name -> parser.IsClosed
	41,  // 115: parser.App.app_store:type_name -> parser.UrlItem
	41,  // 116: parser.App.google_play:type_name -> parser.UrlItem
	52,  // 117: parser.FullLocation.city:type_name -> parser.CityItem
	29,  // 118: parser.Company.GetBySlugV2:input_type -> parser.GetBySlugRequest
	29,  // 119: parser.Company.GetBySlug:input_type -> parser.GetBySlugRequest
	24,  // 120: parser.Company.GetV2:input_type -> parser.GetV2Request
	23,  // 121: parser.Company.Get:input_type -> parser.GetRequest
	20,  // 122: parser.Company.GetRelated:input_type -> parser.GetRelatedRequest
	18,  // 123: parser.Company.GetEmailList:input_type -> parser.GetListRequest
	18,  // 124: parser.Company.GetPhoneList:input_type -> parser.GetListRequest
	14,  // 125: parser.Company.GetBySlugs:input_type -> parser.GetBySlugsRequest
	55,  // 126: parser.Company.GetTotalCount:input_type -> google.protobuf.Empty
	10,  // 127: parser.Company.GetMy:input_type -> parser.GetMyRequest
	9,   // 128: parser.Company.Edit:input_type -> parser.EditRequest
	11,  // 129: parser.Company.GetBy:input_type -> parser.GetByRequest
	12,  // 130: parser.Company.GetManyBy:input_type -> parser.GetManyByRequest
	17,  // 131: parser.Company.Reindex:input_type -> parser.ReindexRequest
	15,  // 132: parser.Company.IsCompanyAvatarExists:input_type -> parser.IsCompanyAvatarExistsRequest
	55,  // 133: parser.Company.UnsetExpiredPremium:input_type -> google.protobuf.Empty
	8,   // 134: parser.Company.RenewCompanyPremium:input_type -> parser.RenewCompanyPremiumRequest
	5,   // 135: parser.Company.GetFull:input_type -> parser.GetFullRequest
	24,  // 136: parser.Company.GetCount:input_type -> parser.GetV2Request
	4,   // 137: parser.Company.SetHidden:input_type -> parser.SetHiddenRequest
	34,  // 138: parser.Company.GetBySlugV2:output_type -> parser.GetBySlugResponse
	30,  // 139: parser.Company.GetBySlug:output_type -> parser.FullCompany
	27,  // 140: parser.Company.GetV2:output_type -> parser.ShortCompanies
	28,  // 141: parser.Company.Get:output_type -> parser.GetResponse
	21,  // 142: parser.Company.GetRelated:output_type -> parser.GetRelatedResponse
	19,  // 143: parser.Company.GetEmailList:output_type -> parser.GetListResponse
	19,  // 144: parser.Company.GetPhoneList:output_type -> parser.GetListResponse
	27,  // 145: parser.Company.GetBySlugs:output_type -> parser.ShortCompanies
	13,  // 146: parser.Company.GetTotalCount:output_type -> parser.GetTotalCountResponse
	26,  // 147: parser.Company.GetMy:output_type -> parser.GetMyResponse
	55,  // 148: parser.Company.Edit:output_type -> google.protobuf.Empty
	33,  // 149: parser.Company.GetBy:output_type -> parser.ShortCompany
	27,  // 150: parser.Company.GetManyBy:output_type -> parser.ShortCompanies
	55,  // 151: parser.Company.Reindex:output_type -> google.protobuf.Empty
	16,  // 152: parser.Company.IsCompanyAvatarExists:output_type -> parser.IsCompanyAvatarExistsResponse
	55,  // 153: parser.Company.UnsetExpiredPremium:output_type -> google.protobuf.Empty
	55,  // 154: parser.Company.RenewCompanyPremium:output_type -> google.protobuf.Empty
	7,   // 155: parser.Company.GetFull:output_type -> parser.FullCompanyV2
	6,   // 156: parser.Company.GetCount:output_type -> parser.GetCountResponse
	55,  // 157: parser.Company.SetHidden:output_type -> google.protobuf.Empty
	138, // [138:158] is the sub-list for method output_type
	118, // [118:138] is the sub-list for method input_type
	118, // [118:118] is the sub-list for extension type_name
	118, // [118:118] is the sub-list for extension extendee
	0,   // [0:118] is the sub-list for field type_name
}

func init() { file_parser_company_proto_init() }
func file_parser_company_proto_init() {
	if File_parser_company_proto != nil {
		return
	}
	file_parser_post_proto_init()
	file_parser_review_proto_init()
	file_parser_city_proto_init()
	file_parser_category_proto_init()
	file_parser_dns_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_parser_company_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHiddenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullCompanyV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewCompanyPremiumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManyByRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBySlugsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCompanyAvatarExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCompanyAvatarExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReindexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VkMembersCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortCompanies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBySlugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TechItemInverted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TechCategoryInverted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBySlugResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*People); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Social); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortSocial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortVk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Domain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_company_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_parser_company_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_parser_company_proto_goTypes,
		DependencyIndexes: file_parser_company_proto_depIdxs,
		EnumInfos:         file_parser_company_proto_enumTypes,
		MessageInfos:      file_parser_company_proto_msgTypes,
	}.Build()
	File_parser_company_proto = out.File
	file_parser_company_proto_rawDesc = nil
	file_parser_company_proto_goTypes = nil
	file_parser_company_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompanyClient is the client API for Company service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyClient interface {
	GetBySlugV2(ctx context.Context, in *GetBySlugRequest, opts ...grpc.CallOption) (*GetBySlugResponse, error)
	// DEPRECATED
	GetBySlug(ctx context.Context, in *GetBySlugRequest, opts ...grpc.CallOption) (*FullCompany, error)
	GetV2(ctx context.Context, in *GetV2Request, opts ...grpc.CallOption) (*ShortCompanies, error)
	// DEPRECATED
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// DEPRECATED: to get related companies use /v{latest}/company/get with cityIds, categoryIds and excludeIds
	GetRelated(ctx context.Context, in *GetRelatedRequest, opts ...grpc.CallOption) (*GetRelatedResponse, error)
	GetEmailList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetPhoneList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetBySlugs(ctx context.Context, in *GetBySlugsRequest, opts ...grpc.CallOption) (*ShortCompanies, error)
	GetTotalCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTotalCountResponse, error)
	// get companies where current user is owner or admin
	GetMy(ctx context.Context, in *GetMyRequest, opts ...grpc.CallOption) (*GetMyResponse, error)
	// edit companies where current user is owner or admin
	Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBy(ctx context.Context, in *GetByRequest, opts ...grpc.CallOption) (*ShortCompany, error)
	GetManyBy(ctx context.Context, in *GetManyByRequest, opts ...grpc.CallOption) (*ShortCompanies, error)
	Reindex(ctx context.Context, in *ReindexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IsCompanyAvatarExists(ctx context.Context, in *IsCompanyAvatarExistsRequest, opts ...grpc.CallOption) (*IsCompanyAvatarExistsResponse, error)
	UnsetExpiredPremium(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RenewCompanyPremium(ctx context.Context, in *RenewCompanyPremiumRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFull(ctx context.Context, in *GetFullRequest, opts ...grpc.CallOption) (Company_GetFullClient, error)
	GetCount(ctx context.Context, in *GetV2Request, opts ...grpc.CallOption) (*GetCountResponse, error)
	SetHidden(ctx context.Context, in *SetHiddenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type companyClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyClient(cc grpc.ClientConnInterface) CompanyClient {
	return &companyClient{cc}
}

func (c *companyClient) GetBySlugV2(ctx context.Context, in *GetBySlugRequest, opts ...grpc.CallOption) (*GetBySlugResponse, error) {
	out := new(GetBySlugResponse)
	err := c.cc.Invoke(ctx, "/parser.Company/GetBySlugV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetBySlug(ctx context.Context, in *GetBySlugRequest, opts ...grpc.CallOption) (*FullCompany, error) {
	out := new(FullCompany)
	err := c.cc.Invoke(ctx, "/parser.Company/GetBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetV2(ctx context.Context, in *GetV2Request, opts ...grpc.CallOption) (*ShortCompanies, error) {
	out := new(ShortCompanies)
	err := c.cc.Invoke(ctx, "/parser.Company/GetV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/parser.Company/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetRelated(ctx context.Context, in *GetRelatedRequest, opts ...grpc.CallOption) (*GetRelatedResponse, error) {
	out := new(GetRelatedResponse)
	err := c.cc.Invoke(ctx, "/parser.Company/GetRelated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetEmailList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/parser.Company/GetEmailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetPhoneList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/parser.Company/GetPhoneList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetBySlugs(ctx context.Context, in *GetBySlugsRequest, opts ...grpc.CallOption) (*ShortCompanies, error) {
	out := new(ShortCompanies)
	err := c.cc.Invoke(ctx, "/parser.Company/GetBySlugs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetTotalCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTotalCountResponse, error) {
	out := new(GetTotalCountResponse)
	err := c.cc.Invoke(ctx, "/parser.Company/GetTotalCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetMy(ctx context.Context, in *GetMyRequest, opts ...grpc.CallOption) (*GetMyResponse, error) {
	out := new(GetMyResponse)
	err := c.cc.Invoke(ctx, "/parser.Company/GetMy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/parser.Company/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetBy(ctx context.Context, in *GetByRequest, opts ...grpc.CallOption) (*ShortCompany, error) {
	out := new(ShortCompany)
	err := c.cc.Invoke(ctx, "/parser.Company/GetBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetManyBy(ctx context.Context, in *GetManyByRequest, opts ...grpc.CallOption) (*ShortCompanies, error) {
	out := new(ShortCompanies)
	err := c.cc.Invoke(ctx, "/parser.Company/GetManyBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) Reindex(ctx context.Context, in *ReindexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/parser.Company/Reindex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) IsCompanyAvatarExists(ctx context.Context, in *IsCompanyAvatarExistsRequest, opts ...grpc.CallOption) (*IsCompanyAvatarExistsResponse, error) {
	out := new(IsCompanyAvatarExistsResponse)
	err := c.cc.Invoke(ctx, "/parser.Company/IsCompanyAvatarExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) UnsetExpiredPremium(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/parser.Company/UnsetExpiredPremium", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) RenewCompanyPremium(ctx context.Context, in *RenewCompanyPremiumRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/parser.Company/RenewCompanyPremium", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetFull(ctx context.Context, in *GetFullRequest, opts ...grpc.CallOption) (Company_GetFullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Company_serviceDesc.Streams[0], "/parser.Company/GetFull", opts...)
	if err != nil {
		return nil, err
	}
	x := &companyGetFullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Company_GetFullClient interface {
	Recv() (*FullCompanyV2, error)
	grpc.ClientStream
}

type companyGetFullClient struct {
	grpc.ClientStream
}

func (x *companyGetFullClient) Recv() (*FullCompanyV2, error) {
	m := new(FullCompanyV2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyClient) GetCount(ctx context.Context, in *GetV2Request, opts ...grpc.CallOption) (*GetCountResponse, error) {
	out := new(GetCountResponse)
	err := c.cc.Invoke(ctx, "/parser.Company/GetCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) SetHidden(ctx context.Context, in *SetHiddenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/parser.Company/SetHidden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServer is the server API for Company service.
type CompanyServer interface {
	GetBySlugV2(context.Context, *GetBySlugRequest) (*GetBySlugResponse, error)
	// DEPRECATED
	GetBySlug(context.Context, *GetBySlugRequest) (*FullCompany, error)
	GetV2(context.Context, *GetV2Request) (*ShortCompanies, error)
	// DEPRECATED
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// DEPRECATED: to get related companies use /v{latest}/company/get with cityIds, categoryIds and excludeIds
	GetRelated(context.Context, *GetRelatedRequest) (*GetRelatedResponse, error)
	GetEmailList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetPhoneList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetBySlugs(context.Context, *GetBySlugsRequest) (*ShortCompanies, error)
	GetTotalCount(context.Context, *emptypb.Empty) (*GetTotalCountResponse, error)
	// get companies where current user is owner or admin
	GetMy(context.Context, *GetMyRequest) (*GetMyResponse, error)
	// edit companies where current user is owner or admin
	Edit(context.Context, *EditRequest) (*emptypb.Empty, error)
	GetBy(context.Context, *GetByRequest) (*ShortCompany, error)
	GetManyBy(context.Context, *GetManyByRequest) (*ShortCompanies, error)
	Reindex(context.Context, *ReindexRequest) (*emptypb.Empty, error)
	IsCompanyAvatarExists(context.Context, *IsCompanyAvatarExistsRequest) (*IsCompanyAvatarExistsResponse, error)
	UnsetExpiredPremium(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	RenewCompanyPremium(context.Context, *RenewCompanyPremiumRequest) (*emptypb.Empty, error)
	GetFull(*GetFullRequest, Company_GetFullServer) error
	GetCount(context.Context, *GetV2Request) (*GetCountResponse, error)
	SetHidden(context.Context, *SetHiddenRequest) (*emptypb.Empty, error)
}

// UnimplementedCompanyServer can be embedded to have forward compatible implementations.
type UnimplementedCompanyServer struct {
}

func (*UnimplementedCompanyServer) GetBySlugV2(context.Context, *GetBySlugRequest) (*GetBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySlugV2 not implemented")
}
func (*UnimplementedCompanyServer) GetBySlug(context.Context, *GetBySlugRequest) (*FullCompany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySlug not implemented")
}
func (*UnimplementedCompanyServer) GetV2(context.Context, *GetV2Request) (*ShortCompanies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetV2 not implemented")
}
func (*UnimplementedCompanyServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCompanyServer) GetRelated(context.Context, *GetRelatedRequest) (*GetRelatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelated not implemented")
}
func (*UnimplementedCompanyServer) GetEmailList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailList not implemented")
}
func (*UnimplementedCompanyServer) GetPhoneList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhoneList not implemented")
}
func (*UnimplementedCompanyServer) GetBySlugs(context.Context, *GetBySlugsRequest) (*ShortCompanies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySlugs not implemented")
}
func (*UnimplementedCompanyServer) GetTotalCount(context.Context, *emptypb.Empty) (*GetTotalCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalCount not implemented")
}
func (*UnimplementedCompanyServer) GetMy(context.Context, *GetMyRequest) (*GetMyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMy not implemented")
}
func (*UnimplementedCompanyServer) Edit(context.Context, *EditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedCompanyServer) GetBy(context.Context, *GetByRequest) (*ShortCompany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBy not implemented")
}
func (*UnimplementedCompanyServer) GetManyBy(context.Context, *GetManyByRequest) (*ShortCompanies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManyBy not implemented")
}
func (*UnimplementedCompanyServer) Reindex(context.Context, *ReindexRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reindex not implemented")
}
func (*UnimplementedCompanyServer) IsCompanyAvatarExists(context.Context, *IsCompanyAvatarExistsRequest) (*IsCompanyAvatarExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCompanyAvatarExists not implemented")
}
func (*UnimplementedCompanyServer) UnsetExpiredPremium(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetExpiredPremium not implemented")
}
func (*UnimplementedCompanyServer) RenewCompanyPremium(context.Context, *RenewCompanyPremiumRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewCompanyPremium not implemented")
}
func (*UnimplementedCompanyServer) GetFull(*GetFullRequest, Company_GetFullServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFull not implemented")
}
func (*UnimplementedCompanyServer) GetCount(context.Context, *GetV2Request) (*GetCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCount not implemented")
}
func (*UnimplementedCompanyServer) SetHidden(context.Context, *SetHiddenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHidden not implemented")
}

func RegisterCompanyServer(s *grpc.Server, srv CompanyServer) {
	s.RegisterService(&_Company_serviceDesc, srv)
}

func _Company_GetBySlugV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetBySlugV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetBySlugV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetBySlugV2(ctx, req.(*GetBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetBySlug(ctx, req.(*GetBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetV2(ctx, req.(*GetV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetRelated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetRelated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetRelated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetRelated(ctx, req.(*GetRelatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetEmailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetEmailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetEmailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetEmailList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetPhoneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetPhoneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetPhoneList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetPhoneList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetBySlugs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBySlugsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetBySlugs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetBySlugs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetBySlugs(ctx, req.(*GetBySlugsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetTotalCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetTotalCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetTotalCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetTotalCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetMy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetMy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetMy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetMy(ctx, req.(*GetMyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).Edit(ctx, req.(*EditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetBy(ctx, req.(*GetByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetManyBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetManyBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetManyBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetManyBy(ctx, req.(*GetManyByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_Reindex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReindexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).Reindex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/Reindex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).Reindex(ctx, req.(*ReindexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_IsCompanyAvatarExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCompanyAvatarExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).IsCompanyAvatarExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/IsCompanyAvatarExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).IsCompanyAvatarExists(ctx, req.(*IsCompanyAvatarExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_UnsetExpiredPremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).UnsetExpiredPremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/UnsetExpiredPremium",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).UnsetExpiredPremium(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_RenewCompanyPremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewCompanyPremiumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).RenewCompanyPremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/RenewCompanyPremium",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).RenewCompanyPremium(ctx, req.(*RenewCompanyPremiumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetFull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServer).GetFull(m, &companyGetFullServer{stream})
}

type Company_GetFullServer interface {
	Send(*FullCompanyV2) error
	grpc.ServerStream
}

type companyGetFullServer struct {
	grpc.ServerStream
}

func (x *companyGetFullServer) Send(m *FullCompanyV2) error {
	return x.ServerStream.SendMsg(m)
}

func _Company_GetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/GetCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetCount(ctx, req.(*GetV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_SetHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHiddenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).SetHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Company/SetHidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).SetHidden(ctx, req.(*SetHiddenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Company_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parser.Company",
	HandlerType: (*CompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBySlugV2",
			Handler:    _Company_GetBySlugV2_Handler,
		},
		{
			MethodName: "GetBySlug",
			Handler:    _Company_GetBySlug_Handler,
		},
		{
			MethodName: "GetV2",
			Handler:    _Company_GetV2_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Company_Get_Handler,
		},
		{
			MethodName: "GetRelated",
			Handler:    _Company_GetRelated_Handler,
		},
		{
			MethodName: "GetEmailList",
			Handler:    _Company_GetEmailList_Handler,
		},
		{
			MethodName: "GetPhoneList",
			Handler:    _Company_GetPhoneList_Handler,
		},
		{
			MethodName: "GetBySlugs",
			Handler:    _Company_GetBySlugs_Handler,
		},
		{
			MethodName: "GetTotalCount",
			Handler:    _Company_GetTotalCount_Handler,
		},
		{
			MethodName: "GetMy",
			Handler:    _Company_GetMy_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _Company_Edit_Handler,
		},
		{
			MethodName: "GetBy",
			Handler:    _Company_GetBy_Handler,
		},
		{
			MethodName: "GetManyBy",
			Handler:    _Company_GetManyBy_Handler,
		},
		{
			MethodName: "Reindex",
			Handler:    _Company_Reindex_Handler,
		},
		{
			MethodName: "IsCompanyAvatarExists",
			Handler:    _Company_IsCompanyAvatarExists_Handler,
		},
		{
			MethodName: "UnsetExpiredPremium",
			Handler:    _Company_UnsetExpiredPremium_Handler,
		},
		{
			MethodName: "RenewCompanyPremium",
			Handler:    _Company_RenewCompanyPremium_Handler,
		},
		{
			MethodName: "GetCount",
			Handler:    _Company_GetCount_Handler,
		},
		{
			MethodName: "SetHidden",
			Handler:    _Company_SetHidden_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFull",
			Handler:       _Company_GetFull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "parser/company.proto",
}
