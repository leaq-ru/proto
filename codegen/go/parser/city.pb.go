// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: parser/city.proto

package parser

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetCityHintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetCityHintsRequest) Reset() {
	*x = GetCityHintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_city_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCityHintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCityHintsRequest) ProtoMessage() {}

func (x *GetCityHintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_city_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCityHintsRequest.ProtoReflect.Descriptor instead.
func (*GetCityHintsRequest) Descriptor() ([]byte, []int) {
	return file_parser_city_proto_rawDescGZIP(), []int{0}
}

func (x *GetCityHintsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetCityHintsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCityBySlugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *GetCityBySlugRequest) Reset() {
	*x = GetCityBySlugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_city_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCityBySlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCityBySlugRequest) ProtoMessage() {}

func (x *GetCityBySlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_city_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCityBySlugRequest.ProtoReflect.Descriptor instead.
func (*GetCityBySlugRequest) Descriptor() ([]byte, []int) {
	return file_parser_city_proto_rawDescGZIP(), []int{1}
}

func (x *GetCityBySlugRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type GetCityByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId string `protobuf:"bytes,1,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
}

func (x *GetCityByIdRequest) Reset() {
	*x = GetCityByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_city_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCityByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCityByIdRequest) ProtoMessage() {}

func (x *GetCityByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_city_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCityByIdRequest.ProtoReflect.Descriptor instead.
func (*GetCityByIdRequest) Descriptor() ([]byte, []int) {
	return file_parser_city_proto_rawDescGZIP(), []int{2}
}

func (x *GetCityByIdRequest) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

type GetCityByIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityIds []string `protobuf:"bytes,1,rep,name=city_ids,json=cityIds,proto3" json:"city_ids,omitempty"`
}

func (x *GetCityByIdsRequest) Reset() {
	*x = GetCityByIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_city_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCityByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCityByIdsRequest) ProtoMessage() {}

func (x *GetCityByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_city_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCityByIdsRequest.ProtoReflect.Descriptor instead.
func (*GetCityByIdsRequest) Descriptor() ([]byte, []int) {
	return file_parser_city_proto_rawDescGZIP(), []int{3}
}

func (x *GetCityByIdsRequest) GetCityIds() []string {
	if x != nil {
		return x.CityIds
	}
	return nil
}

type CitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cities []*CityItem `protobuf:"bytes,1,rep,name=cities,proto3" json:"cities,omitempty"`
}

func (x *CitiesResponse) Reset() {
	*x = CitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_city_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CitiesResponse) ProtoMessage() {}

func (x *CitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_city_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CitiesResponse.ProtoReflect.Descriptor instead.
func (*CitiesResponse) Descriptor() ([]byte, []int) {
	return file_parser_city_proto_rawDescGZIP(), []int{4}
}

func (x *CitiesResponse) GetCities() []*CityItem {
	if x != nil {
		return x.Cities
	}
	return nil
}

type FindCityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Html string `protobuf:"bytes,1,opt,name=html,proto3" json:"html,omitempty"`
}

func (x *FindCityRequest) Reset() {
	*x = FindCityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_city_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCityRequest) ProtoMessage() {}

func (x *FindCityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_city_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCityRequest.ProtoReflect.Descriptor instead.
func (*FindCityRequest) Descriptor() ([]byte, []int) {
	return file_parser_city_proto_rawDescGZIP(), []int{5}
}

func (x *FindCityRequest) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

type FindCityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityId  string `protobuf:"bytes,1,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	IsFound bool   `protobuf:"varint,2,opt,name=is_found,json=isFound,proto3" json:"is_found,omitempty"`
}

func (x *FindCityResponse) Reset() {
	*x = FindCityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_city_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCityResponse) ProtoMessage() {}

func (x *FindCityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_city_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCityResponse.ProtoReflect.Descriptor instead.
func (*FindCityResponse) Descriptor() ([]byte, []int) {
	return file_parser_city_proto_rawDescGZIP(), []int{6}
}

func (x *FindCityResponse) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *FindCityResponse) GetIsFound() bool {
	if x != nil {
		return x.IsFound
	}
	return false
}

type CityItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Slug  string `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *CityItem) Reset() {
	*x = CityItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_city_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityItem) ProtoMessage() {}

func (x *CityItem) ProtoReflect() protoreflect.Message {
	mi := &file_parser_city_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityItem.ProtoReflect.Descriptor instead.
func (*CityItem) Descriptor() ([]byte, []int) {
	return file_parser_city_proto_rawDescGZIP(), []int{7}
}

func (x *CityItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CityItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CityItem) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

var File_parser_city_proto protoreflect.FileDescriptor

var file_parser_city_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x48,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x0a, 0x32, 0x30, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xf0, 0x3f, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x43, 0x69, 0x74, 0x79, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x2d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x69, 0x74,
	0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79,
	0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x22, 0x3a, 0x0a, 0x0e, 0x43, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x63, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x46, 0x0a, 0x10, 0x46, 0x69,
	0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x22, 0x44, 0x0a, 0x08, 0x43, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x32, 0x90, 0x04, 0x0a, 0x04, 0x43, 0x69, 0x74,
	0x79, 0x12, 0x3d, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x12, 0x17, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x1a, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x18, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x74, 0x79, 0x2f,
	0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x69,
	0x74, 0x79, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x79,
	0x53, 0x6c, 0x75, 0x67, 0x12, 0x5e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x42,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x48, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69,
	0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x2d, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6e, 0x71, 0x71, 0x2f, 0x73,
	0x63, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_parser_city_proto_rawDescOnce sync.Once
	file_parser_city_proto_rawDescData = file_parser_city_proto_rawDesc
)

func file_parser_city_proto_rawDescGZIP() []byte {
	file_parser_city_proto_rawDescOnce.Do(func() {
		file_parser_city_proto_rawDescData = protoimpl.X.CompressGZIP(file_parser_city_proto_rawDescData)
	})
	return file_parser_city_proto_rawDescData
}

var file_parser_city_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_parser_city_proto_goTypes = []interface{}{
	(*GetCityHintsRequest)(nil),  // 0: parser.GetCityHintsRequest
	(*GetCityBySlugRequest)(nil), // 1: parser.GetCityBySlugRequest
	(*GetCityByIdRequest)(nil),   // 2: parser.GetCityByIdRequest
	(*GetCityByIdsRequest)(nil),  // 3: parser.GetCityByIdsRequest
	(*CitiesResponse)(nil),       // 4: parser.CitiesResponse
	(*FindCityRequest)(nil),      // 5: parser.FindCityRequest
	(*FindCityResponse)(nil),     // 6: parser.FindCityResponse
	(*CityItem)(nil),             // 7: parser.CityItem
	(*emptypb.Empty)(nil),        // 8: google.protobuf.Empty
}
var file_parser_city_proto_depIdxs = []int32{
	7, // 0: parser.CitiesResponse.cities:type_name -> parser.CityItem
	5, // 1: parser.City.FindCity:input_type -> parser.FindCityRequest
	2, // 2: parser.City.GetCityById:input_type -> parser.GetCityByIdRequest
	1, // 3: parser.City.GetCityBySlug:input_type -> parser.GetCityBySlugRequest
	3, // 4: parser.City.GetCityByIds:input_type -> parser.GetCityByIdsRequest
	8, // 5: parser.City.GetAllCity:input_type -> google.protobuf.Empty
	0, // 6: parser.City.GetCityHints:input_type -> parser.GetCityHintsRequest
	6, // 7: parser.City.FindCity:output_type -> parser.FindCityResponse
	7, // 8: parser.City.GetCityById:output_type -> parser.CityItem
	7, // 9: parser.City.GetCityBySlug:output_type -> parser.CityItem
	4, // 10: parser.City.GetCityByIds:output_type -> parser.CitiesResponse
	4, // 11: parser.City.GetAllCity:output_type -> parser.CitiesResponse
	4, // 12: parser.City.GetCityHints:output_type -> parser.CitiesResponse
	7, // [7:13] is the sub-list for method output_type
	1, // [1:7] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_parser_city_proto_init() }
func file_parser_city_proto_init() {
	if File_parser_city_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_parser_city_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCityHintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_city_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCityBySlugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_city_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCityByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_city_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCityByIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_city_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_city_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_city_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_city_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_parser_city_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_parser_city_proto_goTypes,
		DependencyIndexes: file_parser_city_proto_depIdxs,
		MessageInfos:      file_parser_city_proto_msgTypes,
	}.Build()
	File_parser_city_proto = out.File
	file_parser_city_proto_rawDesc = nil
	file_parser_city_proto_goTypes = nil
	file_parser_city_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CityClient is the client API for City service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CityClient interface {
	FindCity(ctx context.Context, in *FindCityRequest, opts ...grpc.CallOption) (*FindCityResponse, error)
	GetCityById(ctx context.Context, in *GetCityByIdRequest, opts ...grpc.CallOption) (*CityItem, error)
	GetCityBySlug(ctx context.Context, in *GetCityBySlugRequest, opts ...grpc.CallOption) (*CityItem, error)
	GetCityByIds(ctx context.Context, in *GetCityByIdsRequest, opts ...grpc.CallOption) (*CitiesResponse, error)
	GetAllCity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CitiesResponse, error)
	GetCityHints(ctx context.Context, in *GetCityHintsRequest, opts ...grpc.CallOption) (*CitiesResponse, error)
}

type cityClient struct {
	cc grpc.ClientConnInterface
}

func NewCityClient(cc grpc.ClientConnInterface) CityClient {
	return &cityClient{cc}
}

func (c *cityClient) FindCity(ctx context.Context, in *FindCityRequest, opts ...grpc.CallOption) (*FindCityResponse, error) {
	out := new(FindCityResponse)
	err := c.cc.Invoke(ctx, "/parser.City/FindCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) GetCityById(ctx context.Context, in *GetCityByIdRequest, opts ...grpc.CallOption) (*CityItem, error) {
	out := new(CityItem)
	err := c.cc.Invoke(ctx, "/parser.City/GetCityById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) GetCityBySlug(ctx context.Context, in *GetCityBySlugRequest, opts ...grpc.CallOption) (*CityItem, error) {
	out := new(CityItem)
	err := c.cc.Invoke(ctx, "/parser.City/GetCityBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) GetCityByIds(ctx context.Context, in *GetCityByIdsRequest, opts ...grpc.CallOption) (*CitiesResponse, error) {
	out := new(CitiesResponse)
	err := c.cc.Invoke(ctx, "/parser.City/GetCityByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) GetAllCity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CitiesResponse, error) {
	out := new(CitiesResponse)
	err := c.cc.Invoke(ctx, "/parser.City/GetAllCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) GetCityHints(ctx context.Context, in *GetCityHintsRequest, opts ...grpc.CallOption) (*CitiesResponse, error) {
	out := new(CitiesResponse)
	err := c.cc.Invoke(ctx, "/parser.City/GetCityHints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityServer is the server API for City service.
type CityServer interface {
	FindCity(context.Context, *FindCityRequest) (*FindCityResponse, error)
	GetCityById(context.Context, *GetCityByIdRequest) (*CityItem, error)
	GetCityBySlug(context.Context, *GetCityBySlugRequest) (*CityItem, error)
	GetCityByIds(context.Context, *GetCityByIdsRequest) (*CitiesResponse, error)
	GetAllCity(context.Context, *emptypb.Empty) (*CitiesResponse, error)
	GetCityHints(context.Context, *GetCityHintsRequest) (*CitiesResponse, error)
}

// UnimplementedCityServer can be embedded to have forward compatible implementations.
type UnimplementedCityServer struct {
}

func (*UnimplementedCityServer) FindCity(context.Context, *FindCityRequest) (*FindCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCity not implemented")
}
func (*UnimplementedCityServer) GetCityById(context.Context, *GetCityByIdRequest) (*CityItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityById not implemented")
}
func (*UnimplementedCityServer) GetCityBySlug(context.Context, *GetCityBySlugRequest) (*CityItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityBySlug not implemented")
}
func (*UnimplementedCityServer) GetCityByIds(context.Context, *GetCityByIdsRequest) (*CitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityByIds not implemented")
}
func (*UnimplementedCityServer) GetAllCity(context.Context, *emptypb.Empty) (*CitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCity not implemented")
}
func (*UnimplementedCityServer) GetCityHints(context.Context, *GetCityHintsRequest) (*CitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityHints not implemented")
}

func RegisterCityServer(s *grpc.Server, srv CityServer) {
	s.RegisterService(&_City_serviceDesc, srv)
}

func _City_FindCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).FindCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.City/FindCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).FindCity(ctx, req.(*FindCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_GetCityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).GetCityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.City/GetCityById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).GetCityById(ctx, req.(*GetCityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_GetCityBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).GetCityBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.City/GetCityBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).GetCityBySlug(ctx, req.(*GetCityBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_GetCityByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).GetCityByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.City/GetCityByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).GetCityByIds(ctx, req.(*GetCityByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_GetAllCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).GetAllCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.City/GetAllCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).GetAllCity(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_GetCityHints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityHintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).GetCityHints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.City/GetCityHints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).GetCityHints(ctx, req.(*GetCityHintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _City_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parser.City",
	HandlerType: (*CityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindCity",
			Handler:    _City_FindCity_Handler,
		},
		{
			MethodName: "GetCityById",
			Handler:    _City_GetCityById_Handler,
		},
		{
			MethodName: "GetCityBySlug",
			Handler:    _City_GetCityBySlug_Handler,
		},
		{
			MethodName: "GetCityByIds",
			Handler:    _City_GetCityByIds_Handler,
		},
		{
			MethodName: "GetAllCity",
			Handler:    _City_GetAllCity_Handler,
		},
		{
			MethodName: "GetCityHints",
			Handler:    _City_GetCityHints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parser/city.proto",
}
