// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: parser/technology.proto

package parser

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetTechBySlugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *GetTechBySlugRequest) Reset() {
	*x = GetTechBySlugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_technology_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechBySlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechBySlugRequest) ProtoMessage() {}

func (x *GetTechBySlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_technology_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechBySlugRequest.ProtoReflect.Descriptor instead.
func (*GetTechBySlugRequest) Descriptor() ([]byte, []int) {
	return file_parser_technology_proto_rawDescGZIP(), []int{0}
}

func (x *GetTechBySlugRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type GetTechBySlugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Technology *TechItem `protobuf:"bytes,1,opt,name=technology,proto3" json:"technology,omitempty"`
}

func (x *GetTechBySlugResponse) Reset() {
	*x = GetTechBySlugResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_technology_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechBySlugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechBySlugResponse) ProtoMessage() {}

func (x *GetTechBySlugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_technology_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechBySlugResponse.ProtoReflect.Descriptor instead.
func (*GetTechBySlugResponse) Descriptor() ([]byte, []int) {
	return file_parser_technology_proto_rawDescGZIP(), []int{1}
}

func (x *GetTechBySlugResponse) GetTechnology() *TechItem {
	if x != nil {
		return x.Technology
	}
	return nil
}

type GetTechHintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExcludeIds []string `protobuf:"bytes,2,rep,name=exclude_ids,json=excludeIds,proto3" json:"exclude_ids,omitempty"`
	Limit      uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetTechHintsRequest) Reset() {
	*x = GetTechHintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_technology_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechHintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechHintsRequest) ProtoMessage() {}

func (x *GetTechHintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_technology_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechHintsRequest.ProtoReflect.Descriptor instead.
func (*GetTechHintsRequest) Descriptor() ([]byte, []int) {
	return file_parser_technology_proto_rawDescGZIP(), []int{2}
}

func (x *GetTechHintsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTechHintsRequest) GetExcludeIds() []string {
	if x != nil {
		return x.ExcludeIds
	}
	return nil
}

func (x *GetTechHintsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type HintTechItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *HintTechItem) Reset() {
	*x = HintTechItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_technology_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HintTechItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintTechItem) ProtoMessage() {}

func (x *HintTechItem) ProtoReflect() protoreflect.Message {
	mi := &file_parser_technology_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintTechItem.ProtoReflect.Descriptor instead.
func (*HintTechItem) Descriptor() ([]byte, []int) {
	return file_parser_technology_proto_rawDescGZIP(), []int{3}
}

func (x *HintTechItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HintTechItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HintTechItem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetTechHintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Technologies []*HintTechItem `protobuf:"bytes,1,rep,name=technologies,proto3" json:"technologies,omitempty"`
}

func (x *GetTechHintsResponse) Reset() {
	*x = GetTechHintsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_technology_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechHintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechHintsResponse) ProtoMessage() {}

func (x *GetTechHintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_technology_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechHintsResponse.ProtoReflect.Descriptor instead.
func (*GetTechHintsResponse) Descriptor() ([]byte, []int) {
	return file_parser_technology_proto_rawDescGZIP(), []int{4}
}

func (x *GetTechHintsResponse) GetTechnologies() []*HintTechItem {
	if x != nil {
		return x.Technologies
	}
	return nil
}

type GetTechByIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetTechByIdsRequest) Reset() {
	*x = GetTechByIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_technology_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechByIdsRequest) ProtoMessage() {}

func (x *GetTechByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_technology_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechByIdsRequest.ProtoReflect.Descriptor instead.
func (*GetTechByIdsRequest) Descriptor() ([]byte, []int) {
	return file_parser_technology_proto_rawDescGZIP(), []int{5}
}

func (x *GetTechByIdsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type TechCategoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TechCategoryItem) Reset() {
	*x = TechCategoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_technology_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechCategoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechCategoryItem) ProtoMessage() {}

func (x *TechCategoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_parser_technology_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechCategoryItem.ProtoReflect.Descriptor instead.
func (*TechCategoryItem) Descriptor() ([]byte, []int) {
	return file_parser_technology_proto_rawDescGZIP(), []int{6}
}

func (x *TechCategoryItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TechCategoryItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TechItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version    string              `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Categories []*TechCategoryItem `protobuf:"bytes,4,rep,name=categories,proto3" json:"categories,omitempty"`
	Slug       string              `protobuf:"bytes,5,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *TechItem) Reset() {
	*x = TechItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_technology_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechItem) ProtoMessage() {}

func (x *TechItem) ProtoReflect() protoreflect.Message {
	mi := &file_parser_technology_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechItem.ProtoReflect.Descriptor instead.
func (*TechItem) Descriptor() ([]byte, []int) {
	return file_parser_technology_proto_rawDescGZIP(), []int{7}
}

func (x *TechItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TechItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TechItem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TechItem) GetCategories() []*TechCategoryItem {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *TechItem) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type GetTechByIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Technologies []*TechItem `protobuf:"bytes,1,rep,name=technologies,proto3" json:"technologies,omitempty"`
}

func (x *GetTechByIdsResponse) Reset() {
	*x = GetTechByIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_technology_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechByIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechByIdsResponse) ProtoMessage() {}

func (x *GetTechByIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_technology_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechByIdsResponse.ProtoReflect.Descriptor instead.
func (*GetTechByIdsResponse) Descriptor() ([]byte, []int) {
	return file_parser_technology_proto_rawDescGZIP(), []int{8}
}

func (x *GetTechByIdsResponse) GetTechnologies() []*TechItem {
	if x != nil {
		return x.Technologies
	}
	return nil
}

type FindTechRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *FindTechRequest) Reset() {
	*x = FindTechRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_technology_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTechRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTechRequest) ProtoMessage() {}

func (x *FindTechRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parser_technology_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTechRequest.ProtoReflect.Descriptor instead.
func (*FindTechRequest) Descriptor() ([]byte, []int) {
	return file_parser_technology_proto_rawDescGZIP(), []int{9}
}

func (x *FindTechRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type FindTechResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *FindTechResponse) Reset() {
	*x = FindTechResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_parser_technology_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTechResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTechResponse) ProtoMessage() {}

func (x *FindTechResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parser_technology_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTechResponse.ProtoReflect.Descriptor instead.
func (*FindTechResponse) Descriptor() ([]byte, []int) {
	return file_parser_technology_proto_rawDescGZIP(), []int{10}
}

func (x *FindTechResponse) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_parser_technology_proto protoreflect.FileDescriptor

var file_parser_technology_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x49, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x63, 0x68, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68,
	0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x0a, 0x32, 0x30, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xf0, 0x3f, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x4c, 0x0a, 0x0c, 0x48, 0x69,
	0x6e, 0x74, 0x54, 0x65, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x63, 0x68, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x48, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x63, 0x68, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x36, 0x0a, 0x10, 0x54, 0x65, 0x63, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x08,
	0x54, 0x65, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x22, 0x4c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x42,
	0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x63, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x22, 0x23, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x24, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x54,
	0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x32, 0xf6, 0x02,
	0x0a, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x3f, 0x0a, 0x08,
	0x46, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x63, 0x68, 0x12, 0x17, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54,
	0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x42, 0x79,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x42, 0x79, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x63, 0x68, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x48, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x67, 0x65,
	0x74, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63,
	0x68, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x67, 0x65, 0x74,
	0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6e, 0x71, 0x71, 0x2f, 0x73, 0x63, 0x72, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_parser_technology_proto_rawDescOnce sync.Once
	file_parser_technology_proto_rawDescData = file_parser_technology_proto_rawDesc
)

func file_parser_technology_proto_rawDescGZIP() []byte {
	file_parser_technology_proto_rawDescOnce.Do(func() {
		file_parser_technology_proto_rawDescData = protoimpl.X.CompressGZIP(file_parser_technology_proto_rawDescData)
	})
	return file_parser_technology_proto_rawDescData
}

var file_parser_technology_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_parser_technology_proto_goTypes = []interface{}{
	(*GetTechBySlugRequest)(nil),  // 0: parser.GetTechBySlugRequest
	(*GetTechBySlugResponse)(nil), // 1: parser.GetTechBySlugResponse
	(*GetTechHintsRequest)(nil),   // 2: parser.GetTechHintsRequest
	(*HintTechItem)(nil),          // 3: parser.HintTechItem
	(*GetTechHintsResponse)(nil),  // 4: parser.GetTechHintsResponse
	(*GetTechByIdsRequest)(nil),   // 5: parser.GetTechByIdsRequest
	(*TechCategoryItem)(nil),      // 6: parser.TechCategoryItem
	(*TechItem)(nil),              // 7: parser.TechItem
	(*GetTechByIdsResponse)(nil),  // 8: parser.GetTechByIdsResponse
	(*FindTechRequest)(nil),       // 9: parser.FindTechRequest
	(*FindTechResponse)(nil),      // 10: parser.FindTechResponse
}
var file_parser_technology_proto_depIdxs = []int32{
	7,  // 0: parser.GetTechBySlugResponse.technology:type_name -> parser.TechItem
	3,  // 1: parser.GetTechHintsResponse.technologies:type_name -> parser.HintTechItem
	6,  // 2: parser.TechItem.categories:type_name -> parser.TechCategoryItem
	7,  // 3: parser.GetTechByIdsResponse.technologies:type_name -> parser.TechItem
	9,  // 4: parser.Technology.FindTech:input_type -> parser.FindTechRequest
	5,  // 5: parser.Technology.GetTechByIds:input_type -> parser.GetTechByIdsRequest
	2,  // 6: parser.Technology.GetTechHints:input_type -> parser.GetTechHintsRequest
	0,  // 7: parser.Technology.GetTechBySlug:input_type -> parser.GetTechBySlugRequest
	10, // 8: parser.Technology.FindTech:output_type -> parser.FindTechResponse
	8,  // 9: parser.Technology.GetTechByIds:output_type -> parser.GetTechByIdsResponse
	4,  // 10: parser.Technology.GetTechHints:output_type -> parser.GetTechHintsResponse
	1,  // 11: parser.Technology.GetTechBySlug:output_type -> parser.GetTechBySlugResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_parser_technology_proto_init() }
func file_parser_technology_proto_init() {
	if File_parser_technology_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_parser_technology_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechBySlugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_technology_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechBySlugResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_technology_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechHintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_technology_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HintTechItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_technology_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechHintsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_technology_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechByIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_technology_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TechCategoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_technology_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TechItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_technology_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechByIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_technology_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTechRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_parser_technology_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTechResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_parser_technology_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_parser_technology_proto_goTypes,
		DependencyIndexes: file_parser_technology_proto_depIdxs,
		MessageInfos:      file_parser_technology_proto_msgTypes,
	}.Build()
	File_parser_technology_proto = out.File
	file_parser_technology_proto_rawDesc = nil
	file_parser_technology_proto_goTypes = nil
	file_parser_technology_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TechnologyClient is the client API for Technology service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TechnologyClient interface {
	FindTech(ctx context.Context, in *FindTechRequest, opts ...grpc.CallOption) (*FindTechResponse, error)
	GetTechByIds(ctx context.Context, in *GetTechByIdsRequest, opts ...grpc.CallOption) (*GetTechByIdsResponse, error)
	GetTechHints(ctx context.Context, in *GetTechHintsRequest, opts ...grpc.CallOption) (*GetTechHintsResponse, error)
	GetTechBySlug(ctx context.Context, in *GetTechBySlugRequest, opts ...grpc.CallOption) (*GetTechBySlugResponse, error)
}

type technologyClient struct {
	cc grpc.ClientConnInterface
}

func NewTechnologyClient(cc grpc.ClientConnInterface) TechnologyClient {
	return &technologyClient{cc}
}

func (c *technologyClient) FindTech(ctx context.Context, in *FindTechRequest, opts ...grpc.CallOption) (*FindTechResponse, error) {
	out := new(FindTechResponse)
	err := c.cc.Invoke(ctx, "/parser.Technology/FindTech", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *technologyClient) GetTechByIds(ctx context.Context, in *GetTechByIdsRequest, opts ...grpc.CallOption) (*GetTechByIdsResponse, error) {
	out := new(GetTechByIdsResponse)
	err := c.cc.Invoke(ctx, "/parser.Technology/GetTechByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *technologyClient) GetTechHints(ctx context.Context, in *GetTechHintsRequest, opts ...grpc.CallOption) (*GetTechHintsResponse, error) {
	out := new(GetTechHintsResponse)
	err := c.cc.Invoke(ctx, "/parser.Technology/GetTechHints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *technologyClient) GetTechBySlug(ctx context.Context, in *GetTechBySlugRequest, opts ...grpc.CallOption) (*GetTechBySlugResponse, error) {
	out := new(GetTechBySlugResponse)
	err := c.cc.Invoke(ctx, "/parser.Technology/GetTechBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TechnologyServer is the server API for Technology service.
type TechnologyServer interface {
	FindTech(context.Context, *FindTechRequest) (*FindTechResponse, error)
	GetTechByIds(context.Context, *GetTechByIdsRequest) (*GetTechByIdsResponse, error)
	GetTechHints(context.Context, *GetTechHintsRequest) (*GetTechHintsResponse, error)
	GetTechBySlug(context.Context, *GetTechBySlugRequest) (*GetTechBySlugResponse, error)
}

// UnimplementedTechnologyServer can be embedded to have forward compatible implementations.
type UnimplementedTechnologyServer struct {
}

func (*UnimplementedTechnologyServer) FindTech(context.Context, *FindTechRequest) (*FindTechResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTech not implemented")
}
func (*UnimplementedTechnologyServer) GetTechByIds(context.Context, *GetTechByIdsRequest) (*GetTechByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTechByIds not implemented")
}
func (*UnimplementedTechnologyServer) GetTechHints(context.Context, *GetTechHintsRequest) (*GetTechHintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTechHints not implemented")
}
func (*UnimplementedTechnologyServer) GetTechBySlug(context.Context, *GetTechBySlugRequest) (*GetTechBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTechBySlug not implemented")
}

func RegisterTechnologyServer(s *grpc.Server, srv TechnologyServer) {
	s.RegisterService(&_Technology_serviceDesc, srv)
}

func _Technology_FindTech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTechRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnologyServer).FindTech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Technology/FindTech",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnologyServer).FindTech(ctx, req.(*FindTechRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Technology_GetTechByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTechByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnologyServer).GetTechByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Technology/GetTechByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnologyServer).GetTechByIds(ctx, req.(*GetTechByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Technology_GetTechHints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTechHintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnologyServer).GetTechHints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Technology/GetTechHints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnologyServer).GetTechHints(ctx, req.(*GetTechHintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Technology_GetTechBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTechBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechnologyServer).GetTechBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.Technology/GetTechBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechnologyServer).GetTechBySlug(ctx, req.(*GetTechBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Technology_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parser.Technology",
	HandlerType: (*TechnologyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTech",
			Handler:    _Technology_FindTech_Handler,
		},
		{
			MethodName: "GetTechByIds",
			Handler:    _Technology_GetTechByIds_Handler,
		},
		{
			MethodName: "GetTechHints",
			Handler:    _Technology_GetTechHints_Handler,
		},
		{
			MethodName: "GetTechBySlug",
			Handler:    _Technology_GetTechBySlug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parser/technology.proto",
}
