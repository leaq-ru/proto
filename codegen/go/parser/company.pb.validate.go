// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: parser/company.proto

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on GetRelatedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetRelatedRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for CityId

	// no validation rules for CategoryId

	return nil
}

// GetRelatedRequestValidationError is the validation error returned by
// GetRelatedRequest.Validate if the designated constraints aren't met.
type GetRelatedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelatedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelatedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelatedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelatedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelatedRequestValidationError) ErrorName() string {
	return "GetRelatedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelatedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelatedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelatedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelatedRequestValidationError{}

// Validate checks the field values on GetRelatedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRelatedResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetShortCompanies() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRelatedResponseValidationError{
					field:  fmt.Sprintf("ShortCompanies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetRelatedResponseValidationError is the validation error returned by
// GetRelatedResponse.Validate if the designated constraints aren't met.
type GetRelatedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelatedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelatedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelatedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelatedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelatedResponseValidationError) ErrorName() string {
	return "GetRelatedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelatedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelatedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelatedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelatedResponseValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOpts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRequestValidationError{
				field:  "Opts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CityId

	// no validation rules for CategoryId

	return nil
}

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetShortCompanies() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetResponseValidationError{
					field:  fmt.Sprintf("ShortCompanies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	return nil
}

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on GetBySlugRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetBySlugRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetSlug()) < 1 {
		return GetBySlugRequestValidationError{
			field:  "Slug",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetBySlugRequestValidationError is the validation error returned by
// GetBySlugRequest.Validate if the designated constraints aren't met.
type GetBySlugRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBySlugRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBySlugRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBySlugRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBySlugRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBySlugRequestValidationError) ErrorName() string { return "GetBySlugRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBySlugRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBySlugRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBySlugRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBySlugRequestValidationError{}

// Validate checks the field values on FullCompany with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FullCompany) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FullCompanyValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Url

	// no validation rules for Slug

	// no validation rules for Title

	// no validation rules for Email

	// no validation rules for Description

	// no validation rules for Online

	// no validation rules for Phone

	// no validation rules for Inn

	// no validation rules for Kpp

	// no validation rules for Ogrn

	if v, ok := interface{}(m.GetDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FullCompanyValidationError{
				field:  "Domain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Avatar

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FullCompanyValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FullCompanyValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSocial()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FullCompanyValidationError{
				field:  "Social",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPeople() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FullCompanyValidationError{
					field:  fmt.Sprintf("People[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdatedAt

	return nil
}

// FullCompanyValidationError is the validation error returned by
// FullCompany.Validate if the designated constraints aren't met.
type FullCompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FullCompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FullCompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FullCompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FullCompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FullCompanyValidationError) ErrorName() string { return "FullCompanyValidationError" }

// Error satisfies the builtin error interface
func (e FullCompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFullCompany.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FullCompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FullCompanyValidationError{}

// Validate checks the field values on ShortCompany with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ShortCompany) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CategoryId

	// no validation rules for Url

	// no validation rules for Slug

	// no validation rules for Title

	// no validation rules for Email

	// no validation rules for Online

	// no validation rules for Phone

	// no validation rules for Avatar

	return nil
}

// ShortCompanyValidationError is the validation error returned by
// ShortCompany.Validate if the designated constraints aren't met.
type ShortCompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortCompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortCompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortCompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortCompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortCompanyValidationError) ErrorName() string { return "ShortCompanyValidationError" }

// Error satisfies the builtin error interface
func (e ShortCompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortCompany.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortCompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortCompanyValidationError{}

// Validate checks the field values on People with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *People) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VkId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for VkIsClosed

	// no validation rules for Sex

	// no validation rules for Photo_200

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Description

	return nil
}

// PeopleValidationError is the validation error returned by People.Validate if
// the designated constraints aren't met.
type PeopleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeopleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeopleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeopleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeopleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeopleValidationError) ErrorName() string { return "PeopleValidationError" }

// Error satisfies the builtin error interface
func (e PeopleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeople.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeopleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeopleValidationError{}

// Validate checks the field values on Social with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Social) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SocialValidationError{
				field:  "Vk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInstagram()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SocialValidationError{
				field:  "Instagram",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTwitter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SocialValidationError{
				field:  "Twitter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetYoutube()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SocialValidationError{
				field:  "Youtube",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFacebook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SocialValidationError{
				field:  "Facebook",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SocialValidationError is the validation error returned by Social.Validate if
// the designated constraints aren't met.
type SocialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SocialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SocialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SocialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SocialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SocialValidationError) ErrorName() string { return "SocialValidationError" }

// Error satisfies the builtin error interface
func (e SocialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSocial.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SocialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SocialValidationError{}

// Validate checks the field values on Vk with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Vk) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	// no validation rules for Name

	// no validation rules for ScreenName

	// no validation rules for IsClosed

	// no validation rules for Description

	// no validation rules for MembersCount

	// no validation rules for Photo_200

	return nil
}

// VkValidationError is the validation error returned by Vk.Validate if the
// designated constraints aren't met.
type VkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VkValidationError) ErrorName() string { return "VkValidationError" }

// Error satisfies the builtin error interface
func (e VkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VkValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *App) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAppStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "AppStore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGooglePlay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "GooglePlay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on UrlItem with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UrlItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	return nil
}

// UrlItemValidationError is the validation error returned by UrlItem.Validate
// if the designated constraints aren't met.
type UrlItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UrlItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UrlItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UrlItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UrlItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UrlItemValidationError) ErrorName() string { return "UrlItemValidationError" }

// Error satisfies the builtin error interface
func (e UrlItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUrlItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UrlItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UrlItemValidationError{}

// Validate checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Domain) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	// no validation rules for Registrar

	// no validation rules for RegistrationDate

	return nil
}

// DomainValidationError is the validation error returned by Domain.Validate if
// the designated constraints aren't met.
type DomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainValidationError) ErrorName() string { return "DomainValidationError" }

// Error satisfies the builtin error interface
func (e DomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Location) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LocationValidationError{
				field:  "City",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Address

	// no validation rules for AddressTitle

	return nil
}

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}
