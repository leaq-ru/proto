syntax = "proto3";

package parser;
option go_package = "github.com/nnqq/scr-proto/codegen/go/parser";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "city/city.proto";
import "category/category.proto";
import "opts/page.proto";
import "parser/post.proto";

service Company {
  rpc GetBySlugV2(GetBySlugRequest) returns (GetBySlugResponse) {
    option (google.api.http) = {
      get: "/v2/company/getBySlug"
    };
  };
  // DEPRECATED
  rpc GetBySlug(GetBySlugRequest) returns (FullCompany) {
    option (google.api.http) = {
      get: "/v1/company/getBySlug"
    };
  };
  rpc GetV2(GetV2Request) returns (ShortCompanies) {
    option (google.api.http) = {
      get: "/v2/company/get"
    };
  };
  // DEPRECATED
  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get: "/v1/company/get"
    };
  };
  // DEPRECATED: to get related companies use /v{latest}/company/get with cityIds, categoryIds and excludeIds
  rpc GetRelated(GetRelatedRequest) returns (GetRelatedResponse) {
    option (google.api.http) = {
      get: "/v1/company/getRelated"
    };
  };
  rpc GetEmailList(GetListRequest) returns (GetListResponse) {
    option (google.api.http) = {
      get: "/v1/company/getEmailList"
    };
  };
  rpc GetPhoneList(GetListRequest) returns (GetListResponse) {
    option (google.api.http) = {
      get: "/v1/company/getPhoneList"
    };
  };
  rpc GetBySlugs(GetBySlugsRequest) returns (ShortCompanies) {
    option (google.api.http) = {
      get: "/v1/company/getBySlugs"
    };
  };
  rpc Reindex(ReindexRequest) returns (google.protobuf.Empty) {};
  rpc IsCompanyAvatarExists(IsCompanyAvatarExistsRequest) returns (IsCompanyAvatarExistsResponse) {};
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {};
  rpc GetTotalCount(google.protobuf.Empty) returns (GetTotalCountResponse) {
    option (google.api.http) = {
      get: "/v1/company/getTotalCount"
    };
  };
  rpc GetBy(GetByRequest) returns (ShortCompany) {};
  // get companies where current user is owner or admin
  rpc GetMy(GetMyRequest) returns (ShortCompanies) {
    option (google.api.http) = {
      get: "/v1/company/getMy"
    };
  };
  // edit companies where current user is owner or admin
  rpc Edit(EditRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/v1/company/edit"
      body: '*'
    };
  }
}

message EditRequest {
  string company_id = 1;
  google.protobuf.StringValue title = 2;
  google.protobuf.StringValue description = 3;
  google.protobuf.StringValue email = 4;
  google.protobuf.DoubleValue phone = 5;
  google.protobuf.StringValue address_street = 6;
  google.protobuf.StringValue address_house = 7;
  google.protobuf.StringValue vk_slug = 8;
  google.protobuf.StringValue instagram_url = 9;
  google.protobuf.StringValue youtube_url = 10;
  google.protobuf.StringValue facebook_url = 11;
  google.protobuf.StringValue twitter_url = 12;
  google.protobuf.StringValue app_store_url = 13;
  google.protobuf.StringValue google_play_url = 14;
  google.protobuf.DoubleValue inn = 15;
  google.protobuf.DoubleValue kpp = 16;
  google.protobuf.DoubleValue ogrn = 17;
  google.protobuf.StringValue avatar_base64 = 18;
  google.protobuf.StringValue city_id = 19;
  google.protobuf.StringValue category_id = 20;
}

message GetMyRequest {
  opts.SkipLimit opts = 1;
}

message GetByRequest {
  string url = 1;
}

message GetTotalCountResponse {
  uint32 total_count = 1;
}

message DeleteRequest {
  repeated string ids = 1;
}

message GetBySlugsRequest {
  opts.Page opts = 1;
  string city_slug = 2;
  string category_slug = 3;
  string technology_slug = 4;
}

message IsCompanyAvatarExistsRequest {
  string avatar_s3_url = 1;
}

message IsCompanyAvatarExistsResponse {
  bool is_exists = 1;
}

message ReindexRequest {
  string url = 1;
  string registrar = 2;
  google.protobuf.Timestamp registration_date = 3;
}

message GetListRequest {
  repeated string city_ids = 1;
  repeated string category_ids = 2;
  Select has_email = 3;
  Select has_phone = 4;
  Select has_online = 5;
  Select has_inn = 6;
  Select has_kpp = 7;
  Select has_ogrn = 8;
  Select has_app_store = 9;
  Select has_google_play = 10;
  Select has_vk = 11;
  VkMembersCount vk_members_count = 12;
  Select has_instagram = 13;
  Select has_twitter = 14;
  Select has_youtube = 15;
  Select has_facebook = 16;
  repeated string technology_ids = 17;
  FindRule technology_find_rule = 18;
}

message GetListResponse {
  string download_url = 1;
}

message GetRelatedRequest {
  uint32 limit = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    description: "5 default"
	  minimum: 1
    maximum: 10
  }];
  string city_id = 2;
  string category_id = 3;
}

message GetRelatedResponse {
  repeated FullCompany companies = 1;
}

enum Select {
  ANY = 0;
  YES = 1;
  NO = 2;
}

message VkMembersCount {
  uint32 from = 1;
  uint32 to = 2;
}

enum FindRule {
  ONE_OF = 0;
  ALL = 1;
}

message GetRequest {
  opts.Opts opts = 1;
  repeated string city_ids = 2;
  repeated string category_ids = 3;
  Select has_email = 4;
  Select has_phone = 5;
  Select has_online = 6;
  Select has_inn = 7;
  Select has_kpp = 8;
  Select has_ogrn = 9;
  Select has_app_store = 10;
  Select has_google_play = 11;
  Select has_vk = 12;
  VkMembersCount vk_members_count = 13;
  Select has_instagram = 14;
  Select has_twitter = 15;
  Select has_youtube = 16;
  Select has_facebook = 17;
  repeated string exclude_ids = 18;
  repeated string technology_ids = 19;
  FindRule technology_find_rule = 20;
}

message GetV2Request {
  opts.Page opts = 1;
  repeated string city_ids = 2;
  repeated string category_ids = 3;
  Select has_email = 4;
  Select has_phone = 5;
  Select has_online = 6;
  Select has_inn = 7;
  Select has_kpp = 8;
  Select has_ogrn = 9;
  Select has_app_store = 10;
  Select has_google_play = 11;
  Select has_vk = 12;
  VkMembersCount vk_members_count = 13;
  Select has_instagram = 14;
  Select has_twitter = 15;
  Select has_youtube = 16;
  Select has_facebook = 17;
  repeated string technology_ids = 18;
  FindRule technology_find_rule = 19;
}

message ShortCompanies {
  repeated ShortCompany companies = 1;
}

message GetResponse {
  repeated FullCompany companies = 1;
}

message GetBySlugRequest {
  string slug = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    required: "slug"
  }];
}

message FullCompany {
  string id = 1;
  category.CategoryItem category = 2;
  string url = 3;
  string slug = 4;
  string title = 5;
  string email = 6;
  string description = 7;
  bool online = 8;
  double phone = 9;
  double inn = 10;
  double kpp = 11;
  double ogrn = 12;
  Domain domain = 13;
  string avatar = 14;
  FullLocation location = 15;
  App app = 16;
  Social social = 17;
  repeated People people = 18;
  string updated_at = 19;
}

message TechnologyItem {
  string id = 1;
  string name = 2;
  string version = 3;
  string slug = 4;
}

message TechnologyCategory {
  string id = 1;
  string name = 2;
  repeated TechnologyItem technologies = 3;
}

message ShortCompany {
  string id = 1;
  category.CategoryItem category = 2;
  string url = 3;
  string slug = 4;
  string title = 5;
  string email = 6;
  double phone = 7;
  string avatar = 8;
  city.CityItem city = 9;
  App app = 10;
  ShortSocial social = 11;
  string updated_at = 12;
  // company has owner
  bool verified = 13;
}

message GetBySlugResponse {
  FullCompany full_company = 1;
  repeated TechnologyCategory technology_categories = 2;
  // milliseconds
  uint32 page_speed = 3;
  repeated ShortCompany related = 4;
  repeated PostItem posts = 5;
  // company has owner
  bool verified = 6;
}

message People {
  double vk_id = 1;
  string first_name = 2;
  string last_name = 3;
  bool vk_is_closed = 4;
  Sex sex = 5;
  string photo_200 = 6;
  double phone = 7;
  string email = 8;
  string description = 9;
}

enum Sex {
  NONE = 0;
  FEMALE = 1;
  MALE = 2;
}

message Social {
  Vk vk = 1;
  UrlItem instagram = 2;
  UrlItem twitter = 3;
  UrlItem youtube = 4;
  UrlItem facebook = 5;
}

message ShortSocial {
  ShortVk vk = 1;
  UrlItem instagram = 2;
  UrlItem twitter = 3;
  UrlItem youtube = 4;
  UrlItem facebook = 5;
}

message ShortVk {
  string screen_name = 1;
  double members_count = 2;
  double group_id = 3;
}

message Vk {
  double group_id = 1;
  string name = 2;
  string screen_name = 3;
  IsClosed is_closed = 4;
  string description = 5;
  double members_count = 6;
  string photo_200 = 7;
}

enum IsClosed {
  OPEN = 0;
  CLOSE = 1;
  PRIVATE = 2;
}

message App {
  UrlItem app_store = 1;
  UrlItem google_play = 2;
}

message UrlItem {
  string url = 1;
}

message Domain {
  string address = 1;
  string registrar = 2;
  string registration_date = 3;
}

message FullLocation {
  city.CityItem city = 1;
  string address = 2;
  string address_title = 3;
}
